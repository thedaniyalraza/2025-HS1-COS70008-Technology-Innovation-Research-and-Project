{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\draza\\\\classforge\\\\classforge-frontend\\\\src\\\\pages\\\\Allocation.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Allocation = () => {\n  _s();\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    links: []\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch(\"http://localhost:8000/students\");\n        const students = await res.json();\n        const nodes = students.map(s => ({\n          id: s.name,\n          group: s.studentClass,\n          academic: s.academic,\n          wellbeing: s.wellbeing\n        }));\n        const links = [];\n        students.forEach(s => {\n          const from = s.name;\n          if (s.friends) {\n            s.friends.split(\",\").forEach(f => links.push({\n              source: from,\n              target: f.trim(),\n              type: \"friend\"\n            }));\n          }\n          if (s.disrespectful) {\n            s.disrespectful.split(\",\").forEach(d => links.push({\n              source: from,\n              target: d.trim(),\n              type: \"disrespect\"\n            }));\n          }\n        });\n        setGraphData({\n          nodes,\n          links\n        });\n      } catch (err) {\n        console.error(\"‚ùå Failed to load graph data:\", err);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-xl font-bold mb-4 text-blue-800\",\n      children: \"\\uD83E\\uDDE0 Class Social Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"600px\",\n        background: \"#fff\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n        graphData: graphData,\n        nodeLabel: node => `${node.id}\\nClass: ${node.group}\\nAcademic: ${node.academic}\\nWellbeing: ${node.wellbeing}`,\n        nodeAutoColorBy: \"group\",\n        linkColor: link => link.type === \"disrespect\" ? \"red\" : \"green\",\n        linkDirectionalArrowLength: 4,\n        linkDirectionalArrowRelPos: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Allocation, \"MyXi+7KYRiDYxOAKIwb1MBRPXpI=\");\n_c = Allocation;\nexport default Allocation;\nvar _c;\n$RefreshReg$(_c, \"Allocation\");","map":{"version":3,"names":["useEffect","useState","ForceGraph2D","jsxDEV","_jsxDEV","Allocation","_s","graphData","setGraphData","nodes","links","fetchData","res","fetch","students","json","map","s","id","name","group","studentClass","academic","wellbeing","forEach","from","friends","split","f","push","source","target","trim","type","disrespectful","d","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","background","nodeLabel","node","nodeAutoColorBy","linkColor","link","linkDirectionalArrowLength","linkDirectionalArrowRelPos","_c","$RefreshReg$"],"sources":["C:/Users/draza/classforge/classforge-frontend/src/pages/Allocation.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport ForceGraph2D from \"react-force-graph-2d\";\r\n\r\nconst Allocation = () => {\r\n  const [graphData, setGraphData] = useState({ nodes: [], links: [] });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const res = await fetch(\"http://localhost:8000/students\");\r\n        const students = await res.json();\r\n\r\n        const nodes = students.map((s) => ({\r\n          id: s.name,\r\n          group: s.studentClass,\r\n          academic: s.academic,\r\n          wellbeing: s.wellbeing,\r\n        }));\r\n\r\n        const links = [];\r\n\r\n        students.forEach((s) => {\r\n          const from = s.name;\r\n          if (s.friends) {\r\n            s.friends.split(\",\").forEach((f) =>\r\n              links.push({ source: from, target: f.trim(), type: \"friend\" })\r\n            );\r\n          }\r\n          if (s.disrespectful) {\r\n            s.disrespectful.split(\",\").forEach((d) =>\r\n              links.push({ source: from, target: d.trim(), type: \"disrespect\" })\r\n            );\r\n          }\r\n        });\r\n\r\n        setGraphData({ nodes, links });\r\n      } catch (err) {\r\n        console.error(\"‚ùå Failed to load graph data:\", err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h1 className=\"text-xl font-bold mb-4 text-blue-800\">üß† Class Social Graph</h1>\r\n      <div style={{ height: \"600px\", background: \"#fff\" }}>\r\n        <ForceGraph2D\r\n          graphData={graphData}\r\n          nodeLabel={(node) =>\r\n            `${node.id}\\nClass: ${node.group}\\nAcademic: ${node.academic}\\nWellbeing: ${node.wellbeing}`\r\n          }\r\n          nodeAutoColorBy=\"group\"\r\n          linkColor={(link) => (link.type === \"disrespect\" ? \"red\" : \"green\")}\r\n          linkDirectionalArrowLength={4}\r\n          linkDirectionalArrowRelPos={1}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Allocation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}