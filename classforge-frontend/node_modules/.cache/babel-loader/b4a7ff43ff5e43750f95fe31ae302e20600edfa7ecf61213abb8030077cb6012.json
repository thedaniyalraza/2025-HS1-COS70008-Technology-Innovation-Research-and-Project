{"ast":null,"code":"import ThreeForceGraph from 'three-forcegraph';\n\n/* global AFRAME */\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\nvar parseJson = function parseJson(prop) {\n  return typeof prop === 'string' ? JSON.parse(prop) : prop; // already parsed\n};\nvar parseFn = function parseFn(prop) {\n  if (typeof prop === 'function') return prop; // already a function\n  var geval = eval; // Avoid using eval directly https://github.com/rollup/rollup/wiki/Troubleshooting#avoiding-eval\n  try {\n    var evalled = geval('(' + prop + ')');\n    return evalled;\n  } catch (e) {} // Can't eval, not a function\n  return null;\n};\nvar parseAccessor = function parseAccessor(prop) {\n  if (!isNaN(parseFloat(prop))) {\n    return parseFloat(prop);\n  } // parse numbers\n  if (parseFn(prop)) {\n    return parseFn(prop);\n  } // parse functions\n  return prop; // strings\n};\n\n/**\n * 3D Force-Directed Graph component for A-Frame.\n */\nif (!AFRAME.components.hasOwnProperty('forcegraph')) {\n  AFRAME.registerComponent('forcegraph', {\n    schema: {\n      jsonUrl: {\n        type: 'string',\n        \"default\": ''\n      },\n      nodes: {\n        parse: parseJson,\n        \"default\": []\n      },\n      links: {\n        parse: parseJson,\n        \"default\": []\n      },\n      numDimensions: {\n        type: 'number',\n        \"default\": 3\n      },\n      dagMode: {\n        type: 'string',\n        \"default\": ''\n      },\n      dagLevelDistance: {\n        type: 'number',\n        \"default\": 0\n      },\n      dagNodeFilter: {\n        parse: parseFn,\n        \"default\": function _default() {\n          return true;\n        }\n      },\n      onDagError: {\n        parse: parseFn,\n        \"default\": undefined\n      },\n      nodeRelSize: {\n        type: 'number',\n        \"default\": 4\n      },\n      // volume per val unit\n      nodeId: {\n        type: 'string',\n        \"default\": 'id'\n      },\n      nodeVal: {\n        parse: parseAccessor,\n        \"default\": 'val'\n      },\n      nodeResolution: {\n        type: 'number',\n        \"default\": 8\n      },\n      // how many slice segments in the sphere's circumference\n      nodeVisibility: {\n        parse: parseAccessor,\n        \"default\": true\n      },\n      nodeColor: {\n        parse: parseAccessor,\n        \"default\": 'color'\n      },\n      nodeAutoColorBy: {\n        parse: parseAccessor,\n        \"default\": ''\n      },\n      // color nodes with the same field equally\n      nodeOpacity: {\n        type: 'number',\n        \"default\": 0.75\n      },\n      nodeThreeObject: {\n        parse: parseAccessor,\n        \"default\": null\n      },\n      nodeThreeObjectExtend: {\n        parse: parseAccessor,\n        \"default\": false\n      },\n      linkSource: {\n        type: 'string',\n        \"default\": 'source'\n      },\n      linkTarget: {\n        type: 'string',\n        \"default\": 'target'\n      },\n      linkVisibility: {\n        parse: parseAccessor,\n        \"default\": true\n      },\n      linkColor: {\n        parse: parseAccessor,\n        \"default\": 'color'\n      },\n      linkAutoColorBy: {\n        parse: parseAccessor,\n        \"default\": ''\n      },\n      // color links with the same field equally\n      linkOpacity: {\n        type: 'number',\n        \"default\": 0.2\n      },\n      linkWidth: {\n        parse: parseAccessor,\n        \"default\": 0\n      },\n      linkResolution: {\n        type: 'number',\n        \"default\": 6\n      },\n      // how many radial segments in each line cylinder's geometry\n      linkCurvature: {\n        parse: parseAccessor,\n        \"default\": 0\n      },\n      linkCurveRotation: {\n        parse: parseAccessor,\n        \"default\": 0\n      },\n      linkMaterial: {\n        parse: parseAccessor,\n        \"default\": null\n      },\n      linkThreeObject: {\n        parse: parseAccessor,\n        \"default\": null\n      },\n      linkThreeObjectExtend: {\n        parse: parseAccessor,\n        \"default\": false\n      },\n      linkPositionUpdate: {\n        parse: parseFn,\n        \"default\": null\n      },\n      linkDirectionalArrowLength: {\n        parse: parseAccessor,\n        \"default\": 0\n      },\n      linkDirectionalArrowColor: {\n        parse: parseAccessor,\n        \"default\": null\n      },\n      linkDirectionalArrowRelPos: {\n        parse: parseAccessor,\n        \"default\": 0.5\n      },\n      // value between 0<>1 indicating the relative pos along the (exposed) line\n      linkDirectionalArrowResolution: {\n        type: 'number',\n        \"default\": 8\n      },\n      // how many slice segments in the arrow's conic circumference\n      linkDirectionalParticles: {\n        parse: parseAccessor,\n        \"default\": 0\n      },\n      // animate photons travelling in the link direction\n      linkDirectionalParticleSpeed: {\n        parse: parseAccessor,\n        \"default\": 0.01\n      },\n      // in link length ratio per frame\n      linkDirectionalParticleWidth: {\n        parse: parseAccessor,\n        \"default\": 0.5\n      },\n      linkDirectionalParticleColor: {\n        parse: parseAccessor,\n        \"default\": null\n      },\n      linkDirectionalParticleResolution: {\n        type: 'number',\n        \"default\": 4\n      },\n      // how many slice segments in the particle sphere's circumference\n      onNodeHover: {\n        parse: parseFn,\n        \"default\": function _default() {}\n      },\n      onLinkHover: {\n        parse: parseFn,\n        \"default\": function _default() {}\n      },\n      onNodeClick: {\n        parse: parseFn,\n        \"default\": function _default() {}\n      },\n      onLinkClick: {\n        parse: parseFn,\n        \"default\": function _default() {}\n      },\n      forceEngine: {\n        type: 'string',\n        \"default\": 'd3'\n      },\n      // 'd3' or 'ngraph'\n      d3AlphaMin: {\n        type: 'number',\n        \"default\": 0\n      },\n      d3AlphaDecay: {\n        type: 'number',\n        \"default\": 0.0228\n      },\n      d3VelocityDecay: {\n        type: 'number',\n        \"default\": 0.4\n      },\n      ngraphPhysics: {\n        parse: parseJson,\n        \"default\": null\n      },\n      warmupTicks: {\n        type: 'int',\n        \"default\": 0\n      },\n      // how many times to tick the force engine at init before starting to render\n      cooldownTicks: {\n        type: 'int',\n        \"default\": 1e18\n      },\n      // Simulate infinity (int parser doesn't accept Infinity object)\n      cooldownTime: {\n        type: 'int',\n        \"default\": 15000\n      },\n      // ms\n      onEngineTick: {\n        parse: parseFn,\n        \"default\": function _default() {}\n      },\n      onEngineStop: {\n        parse: parseFn,\n        \"default\": function _default() {}\n      }\n    },\n    // Bind component methods\n    getGraphBbox: function getGraphBbox(nodeFilterFn) {\n      if (!this.forceGraph) {\n        // Got here before component init -> initialize forceGraph\n        this.forceGraph = new ThreeForceGraph();\n      }\n      return this.forceGraph.getGraphBbox(nodeFilterFn);\n    },\n    emitParticle: function emitParticle() {\n      if (!this.forceGraph) {\n        // Got here before component init -> initialize forceGraph\n        this.forceGraph = new ThreeForceGraph();\n      }\n      var forceGraph = this.forceGraph;\n      var returnVal = forceGraph.emitParticle.apply(forceGraph, arguments);\n      return returnVal === forceGraph ? this // return self, not the inner forcegraph component\n      : returnVal;\n    },\n    d3Force: function d3Force() {\n      if (!this.forceGraph) {\n        // Got here before component init -> initialize forceGraph\n        this.forceGraph = new ThreeForceGraph();\n      }\n      var forceGraph = this.forceGraph;\n      var returnVal = forceGraph.d3Force.apply(forceGraph, arguments);\n      return returnVal === forceGraph ? this // return self, not the inner forcegraph component\n      : returnVal;\n    },\n    d3ReheatSimulation: function d3ReheatSimulation() {\n      this.forceGraph && this.forceGraph.d3ReheatSimulation();\n      return this;\n    },\n    refresh: function refresh() {\n      this.forceGraph && this.forceGraph.refresh();\n      return this;\n    },\n    init: function init() {\n      var _this = this;\n      var state = this.state = {}; // Internal state\n\n      // Add info msg\n      state.infoEl = document.createElement('a-text');\n      state.infoEl.setAttribute('position', '0 -0.1 -1'); // Canvas center\n      state.infoEl.setAttribute('width', 1);\n      state.infoEl.setAttribute('align', 'center');\n      state.infoEl.setAttribute('color', 'lavender');\n\n      // Get camera dom element and attach fixed view elements to camera\n      var cameraEl = document.querySelector('a-entity[camera], a-camera');\n      cameraEl.appendChild(state.infoEl);\n\n      // Keep reference to Three camera object\n      state.cameraObj = cameraEl.object3D.children.filter(function (child) {\n        return child.type === 'PerspectiveCamera';\n      })[0];\n\n      // On camera switch\n      this.el.sceneEl.addEventListener('camera-set-active', function (evt) {\n        // Switch camera reference\n        state.cameraObj = evt.detail.cameraEl.components.camera.camera;\n      });\n\n      // setup FG object\n      if (!this.forceGraph) this.forceGraph = new ThreeForceGraph(); // initialize forceGraph if it doesn't exist yet\n      this.forceGraph.onFinishUpdate(function () {\n        return _this.el.setObject3D('forcegraphGroup', _this.forceGraph);\n      }) // Bind forcegraph to elem\n      .onLoading(function () {\n        return state.infoEl.setAttribute('value', 'Loading...');\n      }) // Add loading msg\n      .onFinishLoading(function () {\n        return state.infoEl.setAttribute('value', '');\n      });\n\n      // prefer raycaster events over mouseenter/mouseleave because they expose immediately available intersection data via detail.getIntersection()\n      this.el.addEventListener('raycaster-intersected', function (ev) {\n        return state.hoverDetail = ev.detail;\n      });\n      this.el.addEventListener('raycaster-intersected-cleared', function (ev) {\n        return state.hoverDetail = ev.detail;\n      });\n      this.el.addEventListener('click', function () {\n        return state.hoverObj && _this.data['on' + (state.hoverObj.__graphObjType === 'node' ? 'Node' : 'Link') + 'Click'](state.hoverObj.__data);\n      });\n    },\n    remove: function remove() {\n      // Clean-up elems\n      this.state.infoEl.remove();\n      this.el.removeObject3D('forcegraphGroup');\n    },\n    update: function update(oldData) {\n      var comp = this;\n      var elData = this.data;\n      var diff = AFRAME.utils.diff(elData, oldData);\n      var fgProps = ['jsonUrl', 'numDimensions', 'dagMode', 'dagLevelDistance', 'dagNodeFilter', 'onDagError', 'nodeRelSize', 'nodeId', 'nodeVal', 'nodeResolution', 'nodeVisibility', 'nodeColor', 'nodeAutoColorBy', 'nodeOpacity', 'nodeThreeObject', 'nodeThreeObjectExtend', 'linkSource', 'linkTarget', 'linkVisibility', 'linkColor', 'linkAutoColorBy', 'linkOpacity', 'linkWidth', 'linkResolution', 'linkCurvature', 'linkCurveRotation', 'linkMaterial', 'linkThreeObject', 'linkThreeObjectExtend', 'linkPositionUpdate', 'linkDirectionalArrowLength', 'linkDirectionalArrowColor', 'linkDirectionalArrowRelPos', 'linkDirectionalArrowResolution', 'linkDirectionalParticles', 'linkDirectionalParticleSpeed', 'linkDirectionalParticleWidth', 'linkDirectionalParticleColor', 'linkDirectionalParticleResolution', 'forceEngine', 'd3AlphaMin', 'd3AphaDecay', 'd3VelocityDecay', 'ngraphPhysics', 'warmupTicks', 'cooldownTicks', 'cooldownTime', 'onEngineTick', 'onEngineStop'];\n      fgProps.filter(function (p) {\n        return p in diff;\n      }).forEach(function (p) {\n        comp.forceGraph[p](elData[p] !== '' ? elData[p] : null);\n      }); // Convert blank values into nulls\n\n      if ('nodes' in diff || 'links' in diff) {\n        comp.forceGraph.graphData({\n          nodes: elData.nodes,\n          links: elData.links\n        });\n      }\n    },\n    tick: function tick(t, td) {\n      var state = this.state;\n      var props = this.data;\n\n      // Update hover (intersected) object\n      var intersection = state.hoverDetail ? state.hoverDetail.getIntersection ? state.hoverDetail.getIntersection(this.el) // available in raycaster-intersected events\n      : state.hoverDetail.intersection || undefined // available in mouseenter/mouseleave events (with delayed update)\n      : undefined;\n\n      // Note:\n      // Unfortunately we only have access to the intersected object closer to the camera (1st element in the raycaster intersectObjects result),\n      // there is no \".getIntersections()\" method available in the event details. Therefore, we can't prioritize hover on nodes over links, or even exclude\n      // objects that are neither nodes or links. This makes the interaction a bit erratic if nodes have a lot of links in front.\n      // Configuring the raycaster.params.Line.threshold might help with this somewhat, but that config is also not available via the a-frame raycaster component.\n\n      // recurse up until forcegraph obj is found\n      var topObject = intersection ? intersection.object : undefined;\n      while (topObject && !topObject.hasOwnProperty('__graphObjType')) topObject = topObject.parent;\n      if (topObject !== state.hoverObj) {\n        var prevObjType = state.hoverObj ? state.hoverObj.__graphObjType : null;\n        var prevObjData = state.hoverObj ? state.hoverObj.__data : null;\n        var objType = topObject ? topObject.__graphObjType : null;\n        var objData = topObject ? topObject.__data : null;\n        if (prevObjType && prevObjType !== objType) {\n          // Hover out\n          props['on' + (prevObjType === 'node' ? 'Node' : 'Link') + 'Hover'](null, prevObjData);\n        }\n        if (objType) {\n          // Hover in\n          props['on' + (objType === 'node' ? 'Node' : 'Link') + 'Hover'](objData, prevObjType === objType ? prevObjData : null);\n        }\n        state.hoverObj = topObject;\n      }\n\n      // Run force-graph ticker\n      this.forceGraph.tickFrame();\n    }\n  });\n}","map":{"version":3,"names":["ThreeForceGraph","AFRAME","Error","parseJson","prop","JSON","parse","parseFn","geval","eval","evalled","e","parseAccessor","isNaN","parseFloat","components","hasOwnProperty","registerComponent","schema","jsonUrl","type","nodes","links","numDimensions","dagMode","dagLevelDistance","dagNodeFilter","_default","onDagError","undefined","nodeRelSize","nodeId","nodeVal","nodeResolution","nodeVisibility","nodeColor","nodeAutoColorBy","nodeOpacity","nodeThreeObject","nodeThreeObjectExtend","linkSource","linkTarget","linkVisibility","linkColor","linkAutoColorBy","linkOpacity","linkWidth","linkResolution","linkCurvature","linkCurveRotation","linkMaterial","linkThreeObject","linkThreeObjectExtend","linkPositionUpdate","linkDirectionalArrowLength","linkDirectionalArrowColor","linkDirectionalArrowRelPos","linkDirectionalArrowResolution","linkDirectionalParticles","linkDirectionalParticleSpeed","linkDirectionalParticleWidth","linkDirectionalParticleColor","linkDirectionalParticleResolution","onNodeHover","onLinkHover","onNodeClick","onLinkClick","forceEngine","d3AlphaMin","d3AlphaDecay","d3VelocityDecay","ngraphPhysics","warmupTicks","cooldownTicks","cooldownTime","onEngineTick","onEngineStop","getGraphBbox","nodeFilterFn","forceGraph","emitParticle","returnVal","apply","arguments","d3Force","d3ReheatSimulation","refresh","init","_this","state","infoEl","document","createElement","setAttribute","cameraEl","querySelector","appendChild","cameraObj","object3D","children","filter","child","el","sceneEl","addEventListener","evt","detail","camera","onFinishUpdate","setObject3D","onLoading","onFinishLoading","ev","hoverDetail","hoverObj","data","__graphObjType","__data","remove","removeObject3D","update","oldData","comp","elData","diff","utils","fgProps","p","forEach","graphData","tick","t","td","props","intersection","getIntersection","topObject","object","parent","prevObjType","prevObjData","objType","objData","tickFrame"],"sources":["C:/Users/draza/classforge/classforge-frontend/node_modules/aframe-forcegraph-component/dist/aframe-forcegraph-component.mjs"],"sourcesContent":["import ThreeForceGraph from 'three-forcegraph';\n\n/* global AFRAME */\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\nvar parseJson = function parseJson(prop) {\n  return typeof prop === 'string' ? JSON.parse(prop) : prop; // already parsed\n};\nvar parseFn = function parseFn(prop) {\n  if (typeof prop === 'function') return prop; // already a function\n  var geval = eval; // Avoid using eval directly https://github.com/rollup/rollup/wiki/Troubleshooting#avoiding-eval\n  try {\n    var evalled = geval('(' + prop + ')');\n    return evalled;\n  } catch (e) {} // Can't eval, not a function\n  return null;\n};\nvar parseAccessor = function parseAccessor(prop) {\n  if (!isNaN(parseFloat(prop))) {\n    return parseFloat(prop);\n  } // parse numbers\n  if (parseFn(prop)) {\n    return parseFn(prop);\n  } // parse functions\n  return prop; // strings\n};\n\n/**\n * 3D Force-Directed Graph component for A-Frame.\n */\nif (!AFRAME.components.hasOwnProperty('forcegraph')) {\n  AFRAME.registerComponent('forcegraph', {\n    schema: {\n      jsonUrl: {\n        type: 'string',\n        \"default\": ''\n      },\n      nodes: {\n        parse: parseJson,\n        \"default\": []\n      },\n      links: {\n        parse: parseJson,\n        \"default\": []\n      },\n      numDimensions: {\n        type: 'number',\n        \"default\": 3\n      },\n      dagMode: {\n        type: 'string',\n        \"default\": ''\n      },\n      dagLevelDistance: {\n        type: 'number',\n        \"default\": 0\n      },\n      dagNodeFilter: {\n        parse: parseFn,\n        \"default\": function _default() {\n          return true;\n        }\n      },\n      onDagError: {\n        parse: parseFn,\n        \"default\": undefined\n      },\n      nodeRelSize: {\n        type: 'number',\n        \"default\": 4\n      },\n      // volume per val unit\n      nodeId: {\n        type: 'string',\n        \"default\": 'id'\n      },\n      nodeVal: {\n        parse: parseAccessor,\n        \"default\": 'val'\n      },\n      nodeResolution: {\n        type: 'number',\n        \"default\": 8\n      },\n      // how many slice segments in the sphere's circumference\n      nodeVisibility: {\n        parse: parseAccessor,\n        \"default\": true\n      },\n      nodeColor: {\n        parse: parseAccessor,\n        \"default\": 'color'\n      },\n      nodeAutoColorBy: {\n        parse: parseAccessor,\n        \"default\": ''\n      },\n      // color nodes with the same field equally\n      nodeOpacity: {\n        type: 'number',\n        \"default\": 0.75\n      },\n      nodeThreeObject: {\n        parse: parseAccessor,\n        \"default\": null\n      },\n      nodeThreeObjectExtend: {\n        parse: parseAccessor,\n        \"default\": false\n      },\n      linkSource: {\n        type: 'string',\n        \"default\": 'source'\n      },\n      linkTarget: {\n        type: 'string',\n        \"default\": 'target'\n      },\n      linkVisibility: {\n        parse: parseAccessor,\n        \"default\": true\n      },\n      linkColor: {\n        parse: parseAccessor,\n        \"default\": 'color'\n      },\n      linkAutoColorBy: {\n        parse: parseAccessor,\n        \"default\": ''\n      },\n      // color links with the same field equally\n      linkOpacity: {\n        type: 'number',\n        \"default\": 0.2\n      },\n      linkWidth: {\n        parse: parseAccessor,\n        \"default\": 0\n      },\n      linkResolution: {\n        type: 'number',\n        \"default\": 6\n      },\n      // how many radial segments in each line cylinder's geometry\n      linkCurvature: {\n        parse: parseAccessor,\n        \"default\": 0\n      },\n      linkCurveRotation: {\n        parse: parseAccessor,\n        \"default\": 0\n      },\n      linkMaterial: {\n        parse: parseAccessor,\n        \"default\": null\n      },\n      linkThreeObject: {\n        parse: parseAccessor,\n        \"default\": null\n      },\n      linkThreeObjectExtend: {\n        parse: parseAccessor,\n        \"default\": false\n      },\n      linkPositionUpdate: {\n        parse: parseFn,\n        \"default\": null\n      },\n      linkDirectionalArrowLength: {\n        parse: parseAccessor,\n        \"default\": 0\n      },\n      linkDirectionalArrowColor: {\n        parse: parseAccessor,\n        \"default\": null\n      },\n      linkDirectionalArrowRelPos: {\n        parse: parseAccessor,\n        \"default\": 0.5\n      },\n      // value between 0<>1 indicating the relative pos along the (exposed) line\n      linkDirectionalArrowResolution: {\n        type: 'number',\n        \"default\": 8\n      },\n      // how many slice segments in the arrow's conic circumference\n      linkDirectionalParticles: {\n        parse: parseAccessor,\n        \"default\": 0\n      },\n      // animate photons travelling in the link direction\n      linkDirectionalParticleSpeed: {\n        parse: parseAccessor,\n        \"default\": 0.01\n      },\n      // in link length ratio per frame\n      linkDirectionalParticleWidth: {\n        parse: parseAccessor,\n        \"default\": 0.5\n      },\n      linkDirectionalParticleColor: {\n        parse: parseAccessor,\n        \"default\": null\n      },\n      linkDirectionalParticleResolution: {\n        type: 'number',\n        \"default\": 4\n      },\n      // how many slice segments in the particle sphere's circumference\n      onNodeHover: {\n        parse: parseFn,\n        \"default\": function _default() {}\n      },\n      onLinkHover: {\n        parse: parseFn,\n        \"default\": function _default() {}\n      },\n      onNodeClick: {\n        parse: parseFn,\n        \"default\": function _default() {}\n      },\n      onLinkClick: {\n        parse: parseFn,\n        \"default\": function _default() {}\n      },\n      forceEngine: {\n        type: 'string',\n        \"default\": 'd3'\n      },\n      // 'd3' or 'ngraph'\n      d3AlphaMin: {\n        type: 'number',\n        \"default\": 0\n      },\n      d3AlphaDecay: {\n        type: 'number',\n        \"default\": 0.0228\n      },\n      d3VelocityDecay: {\n        type: 'number',\n        \"default\": 0.4\n      },\n      ngraphPhysics: {\n        parse: parseJson,\n        \"default\": null\n      },\n      warmupTicks: {\n        type: 'int',\n        \"default\": 0\n      },\n      // how many times to tick the force engine at init before starting to render\n      cooldownTicks: {\n        type: 'int',\n        \"default\": 1e18\n      },\n      // Simulate infinity (int parser doesn't accept Infinity object)\n      cooldownTime: {\n        type: 'int',\n        \"default\": 15000\n      },\n      // ms\n      onEngineTick: {\n        parse: parseFn,\n        \"default\": function _default() {}\n      },\n      onEngineStop: {\n        parse: parseFn,\n        \"default\": function _default() {}\n      }\n    },\n    // Bind component methods\n    getGraphBbox: function getGraphBbox(nodeFilterFn) {\n      if (!this.forceGraph) {\n        // Got here before component init -> initialize forceGraph\n        this.forceGraph = new ThreeForceGraph();\n      }\n      return this.forceGraph.getGraphBbox(nodeFilterFn);\n    },\n    emitParticle: function emitParticle() {\n      if (!this.forceGraph) {\n        // Got here before component init -> initialize forceGraph\n        this.forceGraph = new ThreeForceGraph();\n      }\n      var forceGraph = this.forceGraph;\n      var returnVal = forceGraph.emitParticle.apply(forceGraph, arguments);\n      return returnVal === forceGraph ? this // return self, not the inner forcegraph component\n      : returnVal;\n    },\n    d3Force: function d3Force() {\n      if (!this.forceGraph) {\n        // Got here before component init -> initialize forceGraph\n        this.forceGraph = new ThreeForceGraph();\n      }\n      var forceGraph = this.forceGraph;\n      var returnVal = forceGraph.d3Force.apply(forceGraph, arguments);\n      return returnVal === forceGraph ? this // return self, not the inner forcegraph component\n      : returnVal;\n    },\n    d3ReheatSimulation: function d3ReheatSimulation() {\n      this.forceGraph && this.forceGraph.d3ReheatSimulation();\n      return this;\n    },\n    refresh: function refresh() {\n      this.forceGraph && this.forceGraph.refresh();\n      return this;\n    },\n    init: function init() {\n      var _this = this;\n      var state = this.state = {}; // Internal state\n\n      // Add info msg\n      state.infoEl = document.createElement('a-text');\n      state.infoEl.setAttribute('position', '0 -0.1 -1'); // Canvas center\n      state.infoEl.setAttribute('width', 1);\n      state.infoEl.setAttribute('align', 'center');\n      state.infoEl.setAttribute('color', 'lavender');\n\n      // Get camera dom element and attach fixed view elements to camera\n      var cameraEl = document.querySelector('a-entity[camera], a-camera');\n      cameraEl.appendChild(state.infoEl);\n\n      // Keep reference to Three camera object\n      state.cameraObj = cameraEl.object3D.children.filter(function (child) {\n        return child.type === 'PerspectiveCamera';\n      })[0];\n\n      // On camera switch\n      this.el.sceneEl.addEventListener('camera-set-active', function (evt) {\n        // Switch camera reference\n        state.cameraObj = evt.detail.cameraEl.components.camera.camera;\n      });\n\n      // setup FG object\n      if (!this.forceGraph) this.forceGraph = new ThreeForceGraph(); // initialize forceGraph if it doesn't exist yet\n      this.forceGraph.onFinishUpdate(function () {\n        return _this.el.setObject3D('forcegraphGroup', _this.forceGraph);\n      }) // Bind forcegraph to elem\n      .onLoading(function () {\n        return state.infoEl.setAttribute('value', 'Loading...');\n      }) // Add loading msg\n      .onFinishLoading(function () {\n        return state.infoEl.setAttribute('value', '');\n      });\n\n      // prefer raycaster events over mouseenter/mouseleave because they expose immediately available intersection data via detail.getIntersection()\n      this.el.addEventListener('raycaster-intersected', function (ev) {\n        return state.hoverDetail = ev.detail;\n      });\n      this.el.addEventListener('raycaster-intersected-cleared', function (ev) {\n        return state.hoverDetail = ev.detail;\n      });\n      this.el.addEventListener('click', function () {\n        return state.hoverObj && _this.data['on' + (state.hoverObj.__graphObjType === 'node' ? 'Node' : 'Link') + 'Click'](state.hoverObj.__data);\n      });\n    },\n    remove: function remove() {\n      // Clean-up elems\n      this.state.infoEl.remove();\n      this.el.removeObject3D('forcegraphGroup');\n    },\n    update: function update(oldData) {\n      var comp = this;\n      var elData = this.data;\n      var diff = AFRAME.utils.diff(elData, oldData);\n      var fgProps = ['jsonUrl', 'numDimensions', 'dagMode', 'dagLevelDistance', 'dagNodeFilter', 'onDagError', 'nodeRelSize', 'nodeId', 'nodeVal', 'nodeResolution', 'nodeVisibility', 'nodeColor', 'nodeAutoColorBy', 'nodeOpacity', 'nodeThreeObject', 'nodeThreeObjectExtend', 'linkSource', 'linkTarget', 'linkVisibility', 'linkColor', 'linkAutoColorBy', 'linkOpacity', 'linkWidth', 'linkResolution', 'linkCurvature', 'linkCurveRotation', 'linkMaterial', 'linkThreeObject', 'linkThreeObjectExtend', 'linkPositionUpdate', 'linkDirectionalArrowLength', 'linkDirectionalArrowColor', 'linkDirectionalArrowRelPos', 'linkDirectionalArrowResolution', 'linkDirectionalParticles', 'linkDirectionalParticleSpeed', 'linkDirectionalParticleWidth', 'linkDirectionalParticleColor', 'linkDirectionalParticleResolution', 'forceEngine', 'd3AlphaMin', 'd3AphaDecay', 'd3VelocityDecay', 'ngraphPhysics', 'warmupTicks', 'cooldownTicks', 'cooldownTime', 'onEngineTick', 'onEngineStop'];\n      fgProps.filter(function (p) {\n        return p in diff;\n      }).forEach(function (p) {\n        comp.forceGraph[p](elData[p] !== '' ? elData[p] : null);\n      }); // Convert blank values into nulls\n\n      if ('nodes' in diff || 'links' in diff) {\n        comp.forceGraph.graphData({\n          nodes: elData.nodes,\n          links: elData.links\n        });\n      }\n    },\n    tick: function tick(t, td) {\n      var state = this.state;\n      var props = this.data;\n\n      // Update hover (intersected) object\n      var intersection = state.hoverDetail ? state.hoverDetail.getIntersection ? state.hoverDetail.getIntersection(this.el) // available in raycaster-intersected events\n      : state.hoverDetail.intersection || undefined // available in mouseenter/mouseleave events (with delayed update)\n      : undefined;\n\n      // Note:\n      // Unfortunately we only have access to the intersected object closer to the camera (1st element in the raycaster intersectObjects result),\n      // there is no \".getIntersections()\" method available in the event details. Therefore, we can't prioritize hover on nodes over links, or even exclude\n      // objects that are neither nodes or links. This makes the interaction a bit erratic if nodes have a lot of links in front.\n      // Configuring the raycaster.params.Line.threshold might help with this somewhat, but that config is also not available via the a-frame raycaster component.\n\n      // recurse up until forcegraph obj is found\n      var topObject = intersection ? intersection.object : undefined;\n      while (topObject && !topObject.hasOwnProperty('__graphObjType')) topObject = topObject.parent;\n      if (topObject !== state.hoverObj) {\n        var prevObjType = state.hoverObj ? state.hoverObj.__graphObjType : null;\n        var prevObjData = state.hoverObj ? state.hoverObj.__data : null;\n        var objType = topObject ? topObject.__graphObjType : null;\n        var objData = topObject ? topObject.__data : null;\n        if (prevObjType && prevObjType !== objType) {\n          // Hover out\n          props['on' + (prevObjType === 'node' ? 'Node' : 'Link') + 'Hover'](null, prevObjData);\n        }\n        if (objType) {\n          // Hover in\n          props['on' + (objType === 'node' ? 'Node' : 'Link') + 'Hover'](objData, prevObjType === objType ? prevObjData : null);\n        }\n        state.hoverObj = topObject;\n      }\n\n      // Run force-graph ticker\n      this.forceGraph.tickFrame();\n    }\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}