{"ast":null,"code":"import { Color } from 'three';\nimport { Pass } from './Pass.js';\n\n/**\n * This class represents a render pass. It takes a camera and a scene and produces\n * a beauty pass for subsequent post processing effects.\n *\n * ```js\n * const renderPass = new RenderPass( scene, camera );\n * composer.addPass( renderPass );\n * ```\n *\n * @augments Pass\n */\nclass RenderPass extends Pass {\n  /**\n   * Constructs a new render pass.\n   *\n   * @param {Scene} scene - The scene to render.\n   * @param {Camera} camera - The camera.\n   * @param {?Material} [overrideMaterial=null] - The override material. If set, this material is used\n   * for all objects in the scene.\n   * @param {?(number|Color|string)} [clearColor=null] - The clear color of the render pass.\n   * @param {?number} [clearAlpha=null] - The clear alpha of the render pass.\n   */\n  constructor(scene, camera, overrideMaterial = null, clearColor = null, clearAlpha = null) {\n    super();\n\n    /**\n     * The scene to render.\n     *\n     * @type {Scene}\n     */\n    this.scene = scene;\n\n    /**\n     * The camera.\n     *\n     * @type {Camera}\n     */\n    this.camera = camera;\n\n    /**\n     * The override material. If set, this material is used\n     * for all objects in the scene.\n     *\n     * @type {?Material}\n     * @default null\n     */\n    this.overrideMaterial = overrideMaterial;\n\n    /**\n     * The clear color of the render pass.\n     *\n     * @type {?(number|Color|string)}\n     * @default null\n     */\n    this.clearColor = clearColor;\n\n    /**\n     * The clear alpha of the render pass.\n     *\n     * @type {?number}\n     * @default null\n     */\n    this.clearAlpha = clearAlpha;\n\n    /**\n     * Overwritten to perform a clear operation by default.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.clear = true;\n\n    /**\n     * If set to `true`, only the depth can be cleared when `clear` is to `false`.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.clearDepth = false;\n\n    /**\n     * Overwritten to disable the swap.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.needsSwap = false;\n    this._oldClearColor = new Color();\n  }\n\n  /**\n   * Performs a beauty pass with the configured scene and camera.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    let oldClearAlpha, oldOverrideMaterial;\n    if (this.overrideMaterial !== null) {\n      oldOverrideMaterial = this.scene.overrideMaterial;\n      this.scene.overrideMaterial = this.overrideMaterial;\n    }\n    if (this.clearColor !== null) {\n      renderer.getClearColor(this._oldClearColor);\n      renderer.setClearColor(this.clearColor, renderer.getClearAlpha());\n    }\n    if (this.clearAlpha !== null) {\n      oldClearAlpha = renderer.getClearAlpha();\n      renderer.setClearAlpha(this.clearAlpha);\n    }\n    if (this.clearDepth == true) {\n      renderer.clearDepth();\n    }\n    renderer.setRenderTarget(this.renderToScreen ? null : readBuffer);\n    if (this.clear === true) {\n      // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n      renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    }\n    renderer.render(this.scene, this.camera);\n\n    // restore\n\n    if (this.clearColor !== null) {\n      renderer.setClearColor(this._oldClearColor);\n    }\n    if (this.clearAlpha !== null) {\n      renderer.setClearAlpha(oldClearAlpha);\n    }\n    if (this.overrideMaterial !== null) {\n      this.scene.overrideMaterial = oldOverrideMaterial;\n    }\n    renderer.autoClear = oldAutoClear;\n  }\n}\nexport { RenderPass };","map":{"version":3,"names":["Color","Pass","RenderPass","constructor","scene","camera","overrideMaterial","clearColor","clearAlpha","clear","clearDepth","needsSwap","_oldClearColor","render","renderer","writeBuffer","readBuffer","oldAutoClear","autoClear","oldClearAlpha","oldOverrideMaterial","getClearColor","setClearColor","getClearAlpha","setClearAlpha","setRenderTarget","renderToScreen","autoClearColor","autoClearDepth","autoClearStencil"],"sources":["C:/Users/draza/classforge/classforge-frontend/node_modules/three/examples/jsm/postprocessing/RenderPass.js"],"sourcesContent":["import {\n\tColor\n} from 'three';\nimport { Pass } from './Pass.js';\n\n/**\n * This class represents a render pass. It takes a camera and a scene and produces\n * a beauty pass for subsequent post processing effects.\n *\n * ```js\n * const renderPass = new RenderPass( scene, camera );\n * composer.addPass( renderPass );\n * ```\n *\n * @augments Pass\n */\nclass RenderPass extends Pass {\n\n\t/**\n\t * Constructs a new render pass.\n\t *\n\t * @param {Scene} scene - The scene to render.\n\t * @param {Camera} camera - The camera.\n\t * @param {?Material} [overrideMaterial=null] - The override material. If set, this material is used\n\t * for all objects in the scene.\n\t * @param {?(number|Color|string)} [clearColor=null] - The clear color of the render pass.\n\t * @param {?number} [clearAlpha=null] - The clear alpha of the render pass.\n\t */\n\tconstructor( scene, camera, overrideMaterial = null, clearColor = null, clearAlpha = null ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * The scene to render.\n\t\t *\n\t\t * @type {Scene}\n\t\t */\n\t\tthis.scene = scene;\n\n\t\t/**\n\t\t * The camera.\n\t\t *\n\t\t * @type {Camera}\n\t\t */\n\t\tthis.camera = camera;\n\n\t\t/**\n\t\t * The override material. If set, this material is used\n\t\t * for all objects in the scene.\n\t\t *\n\t\t * @type {?Material}\n\t\t * @default null\n\t\t */\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\t/**\n\t\t * The clear color of the render pass.\n\t\t *\n\t\t * @type {?(number|Color|string)}\n\t\t * @default null\n\t\t */\n\t\tthis.clearColor = clearColor;\n\n\t\t/**\n\t\t * The clear alpha of the render pass.\n\t\t *\n\t\t * @type {?number}\n\t\t * @default null\n\t\t */\n\t\tthis.clearAlpha = clearAlpha;\n\n\t\t/**\n\t\t * Overwritten to perform a clear operation by default.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.clear = true;\n\n\t\t/**\n\t\t * If set to `true`, only the depth can be cleared when `clear` is to `false`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clearDepth = false;\n\n\t\t/**\n\t\t * Overwritten to disable the swap.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\t/**\n\t * Performs a beauty pass with the configured scene and camera.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== null ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor !== null ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\trenderer.setClearColor( this.clearColor, renderer.getClearAlpha() );\n\n\t\t}\n\n\t\tif ( this.clearAlpha !== null ) {\n\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\t\t\trenderer.setClearAlpha( this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth == true ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\tif ( this.clear === true ) {\n\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// restore\n\n\t\tif ( this.clearColor !== null ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor );\n\n\t\t}\n\n\t\tif ( this.clearAlpha !== null ) {\n\n\t\t\trenderer.setClearAlpha( oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== null ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}