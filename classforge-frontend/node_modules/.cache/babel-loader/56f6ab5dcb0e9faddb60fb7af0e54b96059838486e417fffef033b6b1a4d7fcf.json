{"ast":null,"code":"import { Controls, MOUSE, Quaternion, Spherical, TOUCH, Vector2, Vector3, Plane, Ray, MathUtils } from 'three';\n\n/**\n * Fires when the camera has been transformed by the controls.\n *\n * @event OrbitControls#change\n * @type {Object}\n */\nconst _changeEvent = {\n  type: 'change'\n};\n\n/**\n * Fires when an interaction was initiated.\n *\n * @event OrbitControls#start\n * @type {Object}\n */\nconst _startEvent = {\n  type: 'start'\n};\n\n/**\n * Fires when an interaction has finished.\n *\n * @event OrbitControls#end\n * @type {Object}\n */\nconst _endEvent = {\n  type: 'end'\n};\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst _TILT_LIMIT = Math.cos(70 * MathUtils.DEG2RAD);\nconst _v = new Vector3();\nconst _twoPI = 2 * Math.PI;\nconst _STATE = {\n  NONE: -1,\n  ROTATE: 0,\n  DOLLY: 1,\n  PAN: 2,\n  TOUCH_ROTATE: 3,\n  TOUCH_PAN: 4,\n  TOUCH_DOLLY_PAN: 5,\n  TOUCH_DOLLY_ROTATE: 6\n};\nconst _EPS = 0.000001;\n\n/**\n * Orbit controls allow the camera to orbit around a target.\n *\n * OrbitControls performs orbiting, dollying (zooming), and panning. Unlike {@link TrackballControls},\n * it maintains the \"up\" direction `object.up` (+Y by default).\n *\n * - Orbit: Left mouse / touch: one-finger move.\n * - Zoom: Middle mouse, or mousewheel / touch: two-finger spread or squish.\n * - Pan: Right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move.\n *\n * ```js\n * const controls = new OrbitControls( camera, renderer.domElement );\n *\n * // controls.update() must be called after any manual changes to the camera's transform\n * camera.position.set( 0, 20, 100 );\n * controls.update();\n *\n * function animate() {\n *\n * \t// required if controls.enableDamping or controls.autoRotate are set to true\n * \tcontrols.update();\n *\n * \trenderer.render( scene, camera );\n *\n * }\n * ```\n *\n * @augments Controls\n */\nclass OrbitControls extends Controls {\n  /**\n   * Constructs a new controls instance.\n   *\n   * @param {Object3D} object - The object that is managed by the controls.\n   * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n   */\n  constructor(object, domElement = null) {\n    super(object, domElement);\n    this.state = _STATE.NONE;\n\n    /**\n     * The focus point of the controls, the `object` orbits around this.\n     * It can be updated manually at any point to change the focus of the controls.\n     *\n     * @type {Vector3}\n     */\n    this.target = new Vector3();\n\n    /**\n     * The focus point of the `minTargetRadius` and `maxTargetRadius` limits.\n     * It can be updated manually at any point to change the center of interest\n     * for the `target`.\n     *\n     * @type {Vector3}\n     */\n    this.cursor = new Vector3();\n\n    /**\n     * How far you can dolly in (perspective camera only).\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.minDistance = 0;\n\n    /**\n     * How far you can dolly out (perspective camera only).\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.maxDistance = Infinity;\n\n    /**\n     * How far you can zoom in (orthographic camera only).\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.minZoom = 0;\n\n    /**\n     * How far you can zoom out (orthographic camera only).\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.maxZoom = Infinity;\n\n    /**\n     * How close you can get the target to the 3D `cursor`.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.minTargetRadius = 0;\n\n    /**\n     * How far you can move the target from the 3D `cursor`.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    this.maxTargetRadius = Infinity;\n\n    /**\n     * How far you can orbit vertically, lower limit. Range is `[0, Math.PI]` radians.\n     *\n     * @type {number}\n     * @default 0\n     */\n    this.minPolarAngle = 0;\n\n    /**\n     * How far you can orbit vertically, upper limit. Range is `[0, Math.PI]` radians.\n     *\n     * @type {number}\n     * @default Math.PI\n     */\n    this.maxPolarAngle = Math.PI;\n\n    /**\n     * How far you can orbit horizontally, lower limit. If set, the interval `[ min, max ]`\n     * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\n     *\n     * @type {number}\n     * @default -Infinity\n     */\n    this.minAzimuthAngle = -Infinity;\n\n    /**\n     * How far you can orbit horizontally, upper limit. If set, the interval `[ min, max ]`\n     * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\n     *\n     * @type {number}\n     * @default -Infinity\n     */\n    this.maxAzimuthAngle = Infinity;\n\n    /**\n     * Set to `true` to enable damping (inertia), which can be used to give a sense of weight\n     * to the controls. Note that if this is enabled, you must call `update()` in your animation\n     * loop.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.enableDamping = false;\n\n    /**\n     * The damping inertia used if `enableDamping` is set to `true`.\n     *\n     * Note that for this to work, you must call `update()` in your animation loop.\n     *\n     * @type {number}\n     * @default 0.05\n     */\n    this.dampingFactor = 0.05;\n\n    /**\n     * Enable or disable zooming (dollying) of the camera.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.enableZoom = true;\n\n    /**\n     * Speed of zooming / dollying.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.zoomSpeed = 1.0;\n\n    /**\n     * Enable or disable horizontal and vertical rotation of the camera.\n     *\n     * Note that it is possible to disable a single axis by setting the min and max of the\n     * `minPolarAngle` or `minAzimuthAngle` to the same value, which will cause the vertical\n     * or horizontal rotation to be fixed at that value.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.enableRotate = true;\n\n    /**\n     * Speed of rotation.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.rotateSpeed = 1.0;\n\n    /**\n     * How fast to rotate the camera when the keyboard is used.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.keyRotateSpeed = 1.0;\n\n    /**\n     * Enable or disable camera panning.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.enablePan = true;\n\n    /**\n     * Speed of panning.\n     *\n     * @type {number}\n     * @default 1\n     */\n    this.panSpeed = 1.0;\n\n    /**\n     * Defines how the camera's position is translated when panning. If `true`, the camera pans\n     * in screen space. Otherwise, the camera pans in the plane orthogonal to the camera's up\n     * direction.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.screenSpacePanning = true;\n\n    /**\n     * How fast to pan the camera when the keyboard is used in\n     * pixels per keypress.\n     *\n     * @type {number}\n     * @default 7\n     */\n    this.keyPanSpeed = 7.0;\n\n    /**\n     * Setting this property to `true` allows to zoom to the cursor's position.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.zoomToCursor = false;\n\n    /**\n     * Set to true to automatically rotate around the target\n     *\n     * Note that if this is enabled, you must call `update()` in your animation loop.\n     * If you want the auto-rotate speed to be independent of the frame rate (the refresh\n     * rate of the display), you must pass the time `deltaTime`, in seconds, to `update()`.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.autoRotate = false;\n\n    /**\n     * How fast to rotate around the target if `autoRotate` is `true`. The default  equates to 30 seconds\n     * per orbit at 60fps.\n     *\n     * Note that if `autoRotate` is enabled, you must call `update()` in your animation loop.\n     *\n     * @type {number}\n     * @default 2\n     */\n    this.autoRotateSpeed = 2.0;\n\n    /**\n     * This object contains references to the keycodes for controlling camera panning.\n     *\n     * ```js\n     * controls.keys = {\n     * \tLEFT: 'ArrowLeft', //left arrow\n     * \tUP: 'ArrowUp', // up arrow\n     * \tRIGHT: 'ArrowRight', // right arrow\n     * \tBOTTOM: 'ArrowDown' // down arrow\n     * }\n     * ```\n     * @type {Object}\n     */\n    this.keys = {\n      LEFT: 'ArrowLeft',\n      UP: 'ArrowUp',\n      RIGHT: 'ArrowRight',\n      BOTTOM: 'ArrowDown'\n    };\n\n    /**\n     * This object contains references to the mouse actions used by the controls.\n     *\n     * ```js\n     * controls.mouseButtons = {\n     * \tLEFT: THREE.MOUSE.ROTATE,\n     * \tMIDDLE: THREE.MOUSE.DOLLY,\n     * \tRIGHT: THREE.MOUSE.PAN\n     * }\n     * ```\n     * @type {Object}\n     */\n    this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      MIDDLE: MOUSE.DOLLY,\n      RIGHT: MOUSE.PAN\n    };\n\n    /**\n     * This object contains references to the touch actions used by the controls.\n     *\n     * ```js\n     * controls.mouseButtons = {\n     * \tONE: THREE.TOUCH.ROTATE,\n     * \tTWO: THREE.TOUCH.DOLLY_PAN\n     * }\n     * ```\n     * @type {Object}\n     */\n    this.touches = {\n      ONE: TOUCH.ROTATE,\n      TWO: TOUCH.DOLLY_PAN\n    };\n\n    /**\n     * Used internally by `saveState()` and `reset()`.\n     *\n     * @type {Vector3}\n     */\n    this.target0 = this.target.clone();\n\n    /**\n     * Used internally by `saveState()` and `reset()`.\n     *\n     * @type {Vector3}\n     */\n    this.position0 = this.object.position.clone();\n\n    /**\n     * Used internally by `saveState()` and `reset()`.\n     *\n     * @type {number}\n     */\n    this.zoom0 = this.object.zoom;\n\n    // the target DOM element for key events\n    this._domElementKeyEvents = null;\n\n    // internals\n\n    this._lastPosition = new Vector3();\n    this._lastQuaternion = new Quaternion();\n    this._lastTargetPosition = new Vector3();\n\n    // so camera.up is the orbit axis\n    this._quat = new Quaternion().setFromUnitVectors(object.up, new Vector3(0, 1, 0));\n    this._quatInverse = this._quat.clone().invert();\n\n    // current position in spherical coordinates\n    this._spherical = new Spherical();\n    this._sphericalDelta = new Spherical();\n    this._scale = 1;\n    this._panOffset = new Vector3();\n    this._rotateStart = new Vector2();\n    this._rotateEnd = new Vector2();\n    this._rotateDelta = new Vector2();\n    this._panStart = new Vector2();\n    this._panEnd = new Vector2();\n    this._panDelta = new Vector2();\n    this._dollyStart = new Vector2();\n    this._dollyEnd = new Vector2();\n    this._dollyDelta = new Vector2();\n    this._dollyDirection = new Vector3();\n    this._mouse = new Vector2();\n    this._performCursorZoom = false;\n    this._pointers = [];\n    this._pointerPositions = {};\n    this._controlActive = false;\n\n    // event listeners\n\n    this._onPointerMove = onPointerMove.bind(this);\n    this._onPointerDown = onPointerDown.bind(this);\n    this._onPointerUp = onPointerUp.bind(this);\n    this._onContextMenu = onContextMenu.bind(this);\n    this._onMouseWheel = onMouseWheel.bind(this);\n    this._onKeyDown = onKeyDown.bind(this);\n    this._onTouchStart = onTouchStart.bind(this);\n    this._onTouchMove = onTouchMove.bind(this);\n    this._onMouseDown = onMouseDown.bind(this);\n    this._onMouseMove = onMouseMove.bind(this);\n    this._interceptControlDown = interceptControlDown.bind(this);\n    this._interceptControlUp = interceptControlUp.bind(this);\n\n    //\n\n    if (this.domElement !== null) {\n      this.connect(this.domElement);\n    }\n    this.update();\n  }\n  connect(element) {\n    super.connect(element);\n    this.domElement.addEventListener('pointerdown', this._onPointerDown);\n    this.domElement.addEventListener('pointercancel', this._onPointerUp);\n    this.domElement.addEventListener('contextmenu', this._onContextMenu);\n    this.domElement.addEventListener('wheel', this._onMouseWheel, {\n      passive: false\n    });\n    const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n    document.addEventListener('keydown', this._interceptControlDown, {\n      passive: true,\n      capture: true\n    });\n    this.domElement.style.touchAction = 'none'; // disable touch scroll\n  }\n  disconnect() {\n    this.domElement.removeEventListener('pointerdown', this._onPointerDown);\n    this.domElement.removeEventListener('pointermove', this._onPointerMove);\n    this.domElement.removeEventListener('pointerup', this._onPointerUp);\n    this.domElement.removeEventListener('pointercancel', this._onPointerUp);\n    this.domElement.removeEventListener('wheel', this._onMouseWheel);\n    this.domElement.removeEventListener('contextmenu', this._onContextMenu);\n    this.stopListenToKeyEvents();\n    const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n    document.removeEventListener('keydown', this._interceptControlDown, {\n      capture: true\n    });\n    this.domElement.style.touchAction = 'auto';\n  }\n  dispose() {\n    this.disconnect();\n  }\n\n  /**\n   * Get the current vertical rotation, in radians.\n   *\n   * @return {number} The current vertical rotation, in radians.\n   */\n  getPolarAngle() {\n    return this._spherical.phi;\n  }\n\n  /**\n   * Get the current horizontal rotation, in radians.\n   *\n   * @return {number} The current horizontal rotation, in radians.\n   */\n  getAzimuthalAngle() {\n    return this._spherical.theta;\n  }\n\n  /**\n   * Returns the distance from the camera to the target.\n   *\n   * @return {number} The distance from the camera to the target.\n   */\n  getDistance() {\n    return this.object.position.distanceTo(this.target);\n  }\n\n  /**\n   * Adds key event listeners to the given DOM element.\n   * `window` is a recommended argument for using this method.\n   *\n   * @param {HTMLDOMElement} domElement - The DOM element\n   */\n  listenToKeyEvents(domElement) {\n    domElement.addEventListener('keydown', this._onKeyDown);\n    this._domElementKeyEvents = domElement;\n  }\n\n  /**\n   * Removes the key event listener previously defined with `listenToKeyEvents()`.\n   */\n  stopListenToKeyEvents() {\n    if (this._domElementKeyEvents !== null) {\n      this._domElementKeyEvents.removeEventListener('keydown', this._onKeyDown);\n      this._domElementKeyEvents = null;\n    }\n  }\n\n  /**\n   * Save the current state of the controls. This can later be recovered with `reset()`.\n   */\n  saveState() {\n    this.target0.copy(this.target);\n    this.position0.copy(this.object.position);\n    this.zoom0 = this.object.zoom;\n  }\n\n  /**\n   * Reset the controls to their state from either the last time the `saveState()`\n   * was called, or the initial state.\n   */\n  reset() {\n    this.target.copy(this.target0);\n    this.object.position.copy(this.position0);\n    this.object.zoom = this.zoom0;\n    this.object.updateProjectionMatrix();\n    this.dispatchEvent(_changeEvent);\n    this.update();\n    this.state = _STATE.NONE;\n  }\n  update(deltaTime = null) {\n    const position = this.object.position;\n    _v.copy(position).sub(this.target);\n\n    // rotate offset to \"y-axis-is-up\" space\n    _v.applyQuaternion(this._quat);\n\n    // angle from z-axis around y-axis\n    this._spherical.setFromVector3(_v);\n    if (this.autoRotate && this.state === _STATE.NONE) {\n      this._rotateLeft(this._getAutoRotationAngle(deltaTime));\n    }\n    if (this.enableDamping) {\n      this._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;\n      this._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;\n    } else {\n      this._spherical.theta += this._sphericalDelta.theta;\n      this._spherical.phi += this._sphericalDelta.phi;\n    }\n\n    // restrict theta to be between desired limits\n\n    let min = this.minAzimuthAngle;\n    let max = this.maxAzimuthAngle;\n    if (isFinite(min) && isFinite(max)) {\n      if (min < -Math.PI) min += _twoPI;else if (min > Math.PI) min -= _twoPI;\n      if (max < -Math.PI) max += _twoPI;else if (max > Math.PI) max -= _twoPI;\n      if (min <= max) {\n        this._spherical.theta = Math.max(min, Math.min(max, this._spherical.theta));\n      } else {\n        this._spherical.theta = this._spherical.theta > (min + max) / 2 ? Math.max(min, this._spherical.theta) : Math.min(max, this._spherical.theta);\n      }\n    }\n\n    // restrict phi to be between desired limits\n    this._spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this._spherical.phi));\n    this._spherical.makeSafe();\n\n    // move target to panned location\n\n    if (this.enableDamping === true) {\n      this.target.addScaledVector(this._panOffset, this.dampingFactor);\n    } else {\n      this.target.add(this._panOffset);\n    }\n\n    // Limit the target distance from the cursor to create a sphere around the center of interest\n    this.target.sub(this.cursor);\n    this.target.clampLength(this.minTargetRadius, this.maxTargetRadius);\n    this.target.add(this.cursor);\n    let zoomChanged = false;\n    // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n    // we adjust zoom later in these cases\n    if (this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera) {\n      this._spherical.radius = this._clampDistance(this._spherical.radius);\n    } else {\n      const prevRadius = this._spherical.radius;\n      this._spherical.radius = this._clampDistance(this._spherical.radius * this._scale);\n      zoomChanged = prevRadius != this._spherical.radius;\n    }\n    _v.setFromSpherical(this._spherical);\n\n    // rotate offset back to \"camera-up-vector-is-up\" space\n    _v.applyQuaternion(this._quatInverse);\n    position.copy(this.target).add(_v);\n    this.object.lookAt(this.target);\n    if (this.enableDamping === true) {\n      this._sphericalDelta.theta *= 1 - this.dampingFactor;\n      this._sphericalDelta.phi *= 1 - this.dampingFactor;\n      this._panOffset.multiplyScalar(1 - this.dampingFactor);\n    } else {\n      this._sphericalDelta.set(0, 0, 0);\n      this._panOffset.set(0, 0, 0);\n    }\n\n    // adjust camera position\n    if (this.zoomToCursor && this._performCursorZoom) {\n      let newRadius = null;\n      if (this.object.isPerspectiveCamera) {\n        // move the camera down the pointer ray\n        // this method avoids floating point error\n        const prevRadius = _v.length();\n        newRadius = this._clampDistance(prevRadius * this._scale);\n        const radiusDelta = prevRadius - newRadius;\n        this.object.position.addScaledVector(this._dollyDirection, radiusDelta);\n        this.object.updateMatrixWorld();\n        zoomChanged = !!radiusDelta;\n      } else if (this.object.isOrthographicCamera) {\n        // adjust the ortho camera position based on zoom changes\n        const mouseBefore = new Vector3(this._mouse.x, this._mouse.y, 0);\n        mouseBefore.unproject(this.object);\n        const prevZoom = this.object.zoom;\n        this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));\n        this.object.updateProjectionMatrix();\n        zoomChanged = prevZoom !== this.object.zoom;\n        const mouseAfter = new Vector3(this._mouse.x, this._mouse.y, 0);\n        mouseAfter.unproject(this.object);\n        this.object.position.sub(mouseAfter).add(mouseBefore);\n        this.object.updateMatrixWorld();\n        newRadius = _v.length();\n      } else {\n        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.');\n        this.zoomToCursor = false;\n      }\n\n      // handle the placement of the target\n      if (newRadius !== null) {\n        if (this.screenSpacePanning) {\n          // position the orbit target in front of the new camera position\n          this.target.set(0, 0, -1).transformDirection(this.object.matrix).multiplyScalar(newRadius).add(this.object.position);\n        } else {\n          // get the ray and translation plane to compute target\n          _ray.origin.copy(this.object.position);\n          _ray.direction.set(0, 0, -1).transformDirection(this.object.matrix);\n\n          // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n          // extremely large values\n          if (Math.abs(this.object.up.dot(_ray.direction)) < _TILT_LIMIT) {\n            this.object.lookAt(this.target);\n          } else {\n            _plane.setFromNormalAndCoplanarPoint(this.object.up, this.target);\n            _ray.intersectPlane(_plane, this.target);\n          }\n        }\n      }\n    } else if (this.object.isOrthographicCamera) {\n      const prevZoom = this.object.zoom;\n      this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));\n      if (prevZoom !== this.object.zoom) {\n        this.object.updateProjectionMatrix();\n        zoomChanged = true;\n      }\n    }\n    this._scale = 1;\n    this._performCursorZoom = false;\n\n    // update condition is:\n    // min(camera displacement, camera rotation in radians)^2 > EPS\n    // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n    if (zoomChanged || this._lastPosition.distanceToSquared(this.object.position) > _EPS || 8 * (1 - this._lastQuaternion.dot(this.object.quaternion)) > _EPS || this._lastTargetPosition.distanceToSquared(this.target) > _EPS) {\n      this.dispatchEvent(_changeEvent);\n      this._lastPosition.copy(this.object.position);\n      this._lastQuaternion.copy(this.object.quaternion);\n      this._lastTargetPosition.copy(this.target);\n      return true;\n    }\n    return false;\n  }\n  _getAutoRotationAngle(deltaTime) {\n    if (deltaTime !== null) {\n      return _twoPI / 60 * this.autoRotateSpeed * deltaTime;\n    } else {\n      return _twoPI / 60 / 60 * this.autoRotateSpeed;\n    }\n  }\n  _getZoomScale(delta) {\n    const normalizedDelta = Math.abs(delta * 0.01);\n    return Math.pow(0.95, this.zoomSpeed * normalizedDelta);\n  }\n  _rotateLeft(angle) {\n    this._sphericalDelta.theta -= angle;\n  }\n  _rotateUp(angle) {\n    this._sphericalDelta.phi -= angle;\n  }\n  _panLeft(distance, objectMatrix) {\n    _v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n    _v.multiplyScalar(-distance);\n    this._panOffset.add(_v);\n  }\n  _panUp(distance, objectMatrix) {\n    if (this.screenSpacePanning === true) {\n      _v.setFromMatrixColumn(objectMatrix, 1);\n    } else {\n      _v.setFromMatrixColumn(objectMatrix, 0);\n      _v.crossVectors(this.object.up, _v);\n    }\n    _v.multiplyScalar(distance);\n    this._panOffset.add(_v);\n  }\n\n  // deltaX and deltaY are in pixels; right and down are positive\n  _pan(deltaX, deltaY) {\n    const element = this.domElement;\n    if (this.object.isPerspectiveCamera) {\n      // perspective\n      const position = this.object.position;\n      _v.copy(position).sub(this.target);\n      let targetDistance = _v.length();\n\n      // half of the fov is center to top of screen\n      targetDistance *= Math.tan(this.object.fov / 2 * Math.PI / 180.0);\n\n      // we use only clientHeight here so aspect ratio does not distort speed\n      this._panLeft(2 * deltaX * targetDistance / element.clientHeight, this.object.matrix);\n      this._panUp(2 * deltaY * targetDistance / element.clientHeight, this.object.matrix);\n    } else if (this.object.isOrthographicCamera) {\n      // orthographic\n      this._panLeft(deltaX * (this.object.right - this.object.left) / this.object.zoom / element.clientWidth, this.object.matrix);\n      this._panUp(deltaY * (this.object.top - this.object.bottom) / this.object.zoom / element.clientHeight, this.object.matrix);\n    } else {\n      // camera neither orthographic nor perspective\n      console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n      this.enablePan = false;\n    }\n  }\n  _dollyOut(dollyScale) {\n    if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {\n      this._scale /= dollyScale;\n    } else {\n      console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n      this.enableZoom = false;\n    }\n  }\n  _dollyIn(dollyScale) {\n    if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {\n      this._scale *= dollyScale;\n    } else {\n      console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n      this.enableZoom = false;\n    }\n  }\n  _updateZoomParameters(x, y) {\n    if (!this.zoomToCursor) {\n      return;\n    }\n    this._performCursorZoom = true;\n    const rect = this.domElement.getBoundingClientRect();\n    const dx = x - rect.left;\n    const dy = y - rect.top;\n    const w = rect.width;\n    const h = rect.height;\n    this._mouse.x = dx / w * 2 - 1;\n    this._mouse.y = -(dy / h) * 2 + 1;\n    this._dollyDirection.set(this._mouse.x, this._mouse.y, 1).unproject(this.object).sub(this.object.position).normalize();\n  }\n  _clampDistance(dist) {\n    return Math.max(this.minDistance, Math.min(this.maxDistance, dist));\n  }\n\n  //\n  // event callbacks - update the object state\n  //\n\n  _handleMouseDownRotate(event) {\n    this._rotateStart.set(event.clientX, event.clientY);\n  }\n  _handleMouseDownDolly(event) {\n    this._updateZoomParameters(event.clientX, event.clientX);\n    this._dollyStart.set(event.clientX, event.clientY);\n  }\n  _handleMouseDownPan(event) {\n    this._panStart.set(event.clientX, event.clientY);\n  }\n  _handleMouseMoveRotate(event) {\n    this._rotateEnd.set(event.clientX, event.clientY);\n    this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);\n    const element = this.domElement;\n    this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight); // yes, height\n\n    this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);\n    this._rotateStart.copy(this._rotateEnd);\n    this.update();\n  }\n  _handleMouseMoveDolly(event) {\n    this._dollyEnd.set(event.clientX, event.clientY);\n    this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart);\n    if (this._dollyDelta.y > 0) {\n      this._dollyOut(this._getZoomScale(this._dollyDelta.y));\n    } else if (this._dollyDelta.y < 0) {\n      this._dollyIn(this._getZoomScale(this._dollyDelta.y));\n    }\n    this._dollyStart.copy(this._dollyEnd);\n    this.update();\n  }\n  _handleMouseMovePan(event) {\n    this._panEnd.set(event.clientX, event.clientY);\n    this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);\n    this._pan(this._panDelta.x, this._panDelta.y);\n    this._panStart.copy(this._panEnd);\n    this.update();\n  }\n  _handleMouseWheel(event) {\n    this._updateZoomParameters(event.clientX, event.clientY);\n    if (event.deltaY < 0) {\n      this._dollyIn(this._getZoomScale(event.deltaY));\n    } else if (event.deltaY > 0) {\n      this._dollyOut(this._getZoomScale(event.deltaY));\n    }\n    this.update();\n  }\n  _handleKeyDown(event) {\n    let needsUpdate = false;\n    switch (event.code) {\n      case this.keys.UP:\n        if (event.ctrlKey || event.metaKey || event.shiftKey) {\n          if (this.enableRotate) {\n            this._rotateUp(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n          }\n        } else {\n          if (this.enablePan) {\n            this._pan(0, this.keyPanSpeed);\n          }\n        }\n        needsUpdate = true;\n        break;\n      case this.keys.BOTTOM:\n        if (event.ctrlKey || event.metaKey || event.shiftKey) {\n          if (this.enableRotate) {\n            this._rotateUp(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n          }\n        } else {\n          if (this.enablePan) {\n            this._pan(0, -this.keyPanSpeed);\n          }\n        }\n        needsUpdate = true;\n        break;\n      case this.keys.LEFT:\n        if (event.ctrlKey || event.metaKey || event.shiftKey) {\n          if (this.enableRotate) {\n            this._rotateLeft(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n          }\n        } else {\n          if (this.enablePan) {\n            this._pan(this.keyPanSpeed, 0);\n          }\n        }\n        needsUpdate = true;\n        break;\n      case this.keys.RIGHT:\n        if (event.ctrlKey || event.metaKey || event.shiftKey) {\n          if (this.enableRotate) {\n            this._rotateLeft(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n          }\n        } else {\n          if (this.enablePan) {\n            this._pan(-this.keyPanSpeed, 0);\n          }\n        }\n        needsUpdate = true;\n        break;\n    }\n    if (needsUpdate) {\n      // prevent the browser from scrolling on cursor keys\n      event.preventDefault();\n      this.update();\n    }\n  }\n  _handleTouchStartRotate(event) {\n    if (this._pointers.length === 1) {\n      this._rotateStart.set(event.pageX, event.pageY);\n    } else {\n      const position = this._getSecondPointerPosition(event);\n      const x = 0.5 * (event.pageX + position.x);\n      const y = 0.5 * (event.pageY + position.y);\n      this._rotateStart.set(x, y);\n    }\n  }\n  _handleTouchStartPan(event) {\n    if (this._pointers.length === 1) {\n      this._panStart.set(event.pageX, event.pageY);\n    } else {\n      const position = this._getSecondPointerPosition(event);\n      const x = 0.5 * (event.pageX + position.x);\n      const y = 0.5 * (event.pageY + position.y);\n      this._panStart.set(x, y);\n    }\n  }\n  _handleTouchStartDolly(event) {\n    const position = this._getSecondPointerPosition(event);\n    const dx = event.pageX - position.x;\n    const dy = event.pageY - position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    this._dollyStart.set(0, distance);\n  }\n  _handleTouchStartDollyPan(event) {\n    if (this.enableZoom) this._handleTouchStartDolly(event);\n    if (this.enablePan) this._handleTouchStartPan(event);\n  }\n  _handleTouchStartDollyRotate(event) {\n    if (this.enableZoom) this._handleTouchStartDolly(event);\n    if (this.enableRotate) this._handleTouchStartRotate(event);\n  }\n  _handleTouchMoveRotate(event) {\n    if (this._pointers.length == 1) {\n      this._rotateEnd.set(event.pageX, event.pageY);\n    } else {\n      const position = this._getSecondPointerPosition(event);\n      const x = 0.5 * (event.pageX + position.x);\n      const y = 0.5 * (event.pageY + position.y);\n      this._rotateEnd.set(x, y);\n    }\n    this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);\n    const element = this.domElement;\n    this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight); // yes, height\n\n    this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);\n    this._rotateStart.copy(this._rotateEnd);\n  }\n  _handleTouchMovePan(event) {\n    if (this._pointers.length === 1) {\n      this._panEnd.set(event.pageX, event.pageY);\n    } else {\n      const position = this._getSecondPointerPosition(event);\n      const x = 0.5 * (event.pageX + position.x);\n      const y = 0.5 * (event.pageY + position.y);\n      this._panEnd.set(x, y);\n    }\n    this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);\n    this._pan(this._panDelta.x, this._panDelta.y);\n    this._panStart.copy(this._panEnd);\n  }\n  _handleTouchMoveDolly(event) {\n    const position = this._getSecondPointerPosition(event);\n    const dx = event.pageX - position.x;\n    const dy = event.pageY - position.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    this._dollyEnd.set(0, distance);\n    this._dollyDelta.set(0, Math.pow(this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed));\n    this._dollyOut(this._dollyDelta.y);\n    this._dollyStart.copy(this._dollyEnd);\n    const centerX = (event.pageX + position.x) * 0.5;\n    const centerY = (event.pageY + position.y) * 0.5;\n    this._updateZoomParameters(centerX, centerY);\n  }\n  _handleTouchMoveDollyPan(event) {\n    if (this.enableZoom) this._handleTouchMoveDolly(event);\n    if (this.enablePan) this._handleTouchMovePan(event);\n  }\n  _handleTouchMoveDollyRotate(event) {\n    if (this.enableZoom) this._handleTouchMoveDolly(event);\n    if (this.enableRotate) this._handleTouchMoveRotate(event);\n  }\n\n  // pointers\n\n  _addPointer(event) {\n    this._pointers.push(event.pointerId);\n  }\n  _removePointer(event) {\n    delete this._pointerPositions[event.pointerId];\n    for (let i = 0; i < this._pointers.length; i++) {\n      if (this._pointers[i] == event.pointerId) {\n        this._pointers.splice(i, 1);\n        return;\n      }\n    }\n  }\n  _isTrackingPointer(event) {\n    for (let i = 0; i < this._pointers.length; i++) {\n      if (this._pointers[i] == event.pointerId) return true;\n    }\n    return false;\n  }\n  _trackPointer(event) {\n    let position = this._pointerPositions[event.pointerId];\n    if (position === undefined) {\n      position = new Vector2();\n      this._pointerPositions[event.pointerId] = position;\n    }\n    position.set(event.pageX, event.pageY);\n  }\n  _getSecondPointerPosition(event) {\n    const pointerId = event.pointerId === this._pointers[0] ? this._pointers[1] : this._pointers[0];\n    return this._pointerPositions[pointerId];\n  }\n\n  //\n\n  _customWheelEvent(event) {\n    const mode = event.deltaMode;\n\n    // minimal wheel event altered to meet delta-zoom demand\n    const newEvent = {\n      clientX: event.clientX,\n      clientY: event.clientY,\n      deltaY: event.deltaY\n    };\n    switch (mode) {\n      case 1:\n        // LINE_MODE\n        newEvent.deltaY *= 16;\n        break;\n      case 2:\n        // PAGE_MODE\n        newEvent.deltaY *= 100;\n        break;\n    }\n\n    // detect if event was triggered by pinching\n    if (event.ctrlKey && !this._controlActive) {\n      newEvent.deltaY *= 10;\n    }\n    return newEvent;\n  }\n}\nfunction onPointerDown(event) {\n  if (this.enabled === false) return;\n  if (this._pointers.length === 0) {\n    this.domElement.setPointerCapture(event.pointerId);\n    this.domElement.addEventListener('pointermove', this._onPointerMove);\n    this.domElement.addEventListener('pointerup', this._onPointerUp);\n  }\n\n  //\n\n  if (this._isTrackingPointer(event)) return;\n\n  //\n\n  this._addPointer(event);\n  if (event.pointerType === 'touch') {\n    this._onTouchStart(event);\n  } else {\n    this._onMouseDown(event);\n  }\n}\nfunction onPointerMove(event) {\n  if (this.enabled === false) return;\n  if (event.pointerType === 'touch') {\n    this._onTouchMove(event);\n  } else {\n    this._onMouseMove(event);\n  }\n}\nfunction onPointerUp(event) {\n  this._removePointer(event);\n  switch (this._pointers.length) {\n    case 0:\n      this.domElement.releasePointerCapture(event.pointerId);\n      this.domElement.removeEventListener('pointermove', this._onPointerMove);\n      this.domElement.removeEventListener('pointerup', this._onPointerUp);\n      this.dispatchEvent(_endEvent);\n      this.state = _STATE.NONE;\n      break;\n    case 1:\n      const pointerId = this._pointers[0];\n      const position = this._pointerPositions[pointerId];\n\n      // minimal placeholder event - allows state correction on pointer-up\n      this._onTouchStart({\n        pointerId: pointerId,\n        pageX: position.x,\n        pageY: position.y\n      });\n      break;\n  }\n}\nfunction onMouseDown(event) {\n  let mouseAction;\n  switch (event.button) {\n    case 0:\n      mouseAction = this.mouseButtons.LEFT;\n      break;\n    case 1:\n      mouseAction = this.mouseButtons.MIDDLE;\n      break;\n    case 2:\n      mouseAction = this.mouseButtons.RIGHT;\n      break;\n    default:\n      mouseAction = -1;\n  }\n  switch (mouseAction) {\n    case MOUSE.DOLLY:\n      if (this.enableZoom === false) return;\n      this._handleMouseDownDolly(event);\n      this.state = _STATE.DOLLY;\n      break;\n    case MOUSE.ROTATE:\n      if (event.ctrlKey || event.metaKey || event.shiftKey) {\n        if (this.enablePan === false) return;\n        this._handleMouseDownPan(event);\n        this.state = _STATE.PAN;\n      } else {\n        if (this.enableRotate === false) return;\n        this._handleMouseDownRotate(event);\n        this.state = _STATE.ROTATE;\n      }\n      break;\n    case MOUSE.PAN:\n      if (event.ctrlKey || event.metaKey || event.shiftKey) {\n        if (this.enableRotate === false) return;\n        this._handleMouseDownRotate(event);\n        this.state = _STATE.ROTATE;\n      } else {\n        if (this.enablePan === false) return;\n        this._handleMouseDownPan(event);\n        this.state = _STATE.PAN;\n      }\n      break;\n    default:\n      this.state = _STATE.NONE;\n  }\n  if (this.state !== _STATE.NONE) {\n    this.dispatchEvent(_startEvent);\n  }\n}\nfunction onMouseMove(event) {\n  switch (this.state) {\n    case _STATE.ROTATE:\n      if (this.enableRotate === false) return;\n      this._handleMouseMoveRotate(event);\n      break;\n    case _STATE.DOLLY:\n      if (this.enableZoom === false) return;\n      this._handleMouseMoveDolly(event);\n      break;\n    case _STATE.PAN:\n      if (this.enablePan === false) return;\n      this._handleMouseMovePan(event);\n      break;\n  }\n}\nfunction onMouseWheel(event) {\n  if (this.enabled === false || this.enableZoom === false || this.state !== _STATE.NONE) return;\n  event.preventDefault();\n  this.dispatchEvent(_startEvent);\n  this._handleMouseWheel(this._customWheelEvent(event));\n  this.dispatchEvent(_endEvent);\n}\nfunction onKeyDown(event) {\n  if (this.enabled === false) return;\n  this._handleKeyDown(event);\n}\nfunction onTouchStart(event) {\n  this._trackPointer(event);\n  switch (this._pointers.length) {\n    case 1:\n      switch (this.touches.ONE) {\n        case TOUCH.ROTATE:\n          if (this.enableRotate === false) return;\n          this._handleTouchStartRotate(event);\n          this.state = _STATE.TOUCH_ROTATE;\n          break;\n        case TOUCH.PAN:\n          if (this.enablePan === false) return;\n          this._handleTouchStartPan(event);\n          this.state = _STATE.TOUCH_PAN;\n          break;\n        default:\n          this.state = _STATE.NONE;\n      }\n      break;\n    case 2:\n      switch (this.touches.TWO) {\n        case TOUCH.DOLLY_PAN:\n          if (this.enableZoom === false && this.enablePan === false) return;\n          this._handleTouchStartDollyPan(event);\n          this.state = _STATE.TOUCH_DOLLY_PAN;\n          break;\n        case TOUCH.DOLLY_ROTATE:\n          if (this.enableZoom === false && this.enableRotate === false) return;\n          this._handleTouchStartDollyRotate(event);\n          this.state = _STATE.TOUCH_DOLLY_ROTATE;\n          break;\n        default:\n          this.state = _STATE.NONE;\n      }\n      break;\n    default:\n      this.state = _STATE.NONE;\n  }\n  if (this.state !== _STATE.NONE) {\n    this.dispatchEvent(_startEvent);\n  }\n}\nfunction onTouchMove(event) {\n  this._trackPointer(event);\n  switch (this.state) {\n    case _STATE.TOUCH_ROTATE:\n      if (this.enableRotate === false) return;\n      this._handleTouchMoveRotate(event);\n      this.update();\n      break;\n    case _STATE.TOUCH_PAN:\n      if (this.enablePan === false) return;\n      this._handleTouchMovePan(event);\n      this.update();\n      break;\n    case _STATE.TOUCH_DOLLY_PAN:\n      if (this.enableZoom === false && this.enablePan === false) return;\n      this._handleTouchMoveDollyPan(event);\n      this.update();\n      break;\n    case _STATE.TOUCH_DOLLY_ROTATE:\n      if (this.enableZoom === false && this.enableRotate === false) return;\n      this._handleTouchMoveDollyRotate(event);\n      this.update();\n      break;\n    default:\n      this.state = _STATE.NONE;\n  }\n}\nfunction onContextMenu(event) {\n  if (this.enabled === false) return;\n  event.preventDefault();\n}\nfunction interceptControlDown(event) {\n  if (event.key === 'Control') {\n    this._controlActive = true;\n    const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\n    document.addEventListener('keyup', this._interceptControlUp, {\n      passive: true,\n      capture: true\n    });\n  }\n}\nfunction interceptControlUp(event) {\n  if (event.key === 'Control') {\n    this._controlActive = false;\n    const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\n    document.removeEventListener('keyup', this._interceptControlUp, {\n      passive: true,\n      capture: true\n    });\n  }\n}\nexport { OrbitControls };","map":{"version":3,"names":["Controls","MOUSE","Quaternion","Spherical","TOUCH","Vector2","Vector3","Plane","Ray","MathUtils","_changeEvent","type","_startEvent","_endEvent","_ray","_plane","_TILT_LIMIT","Math","cos","DEG2RAD","_v","_twoPI","PI","_STATE","NONE","ROTATE","DOLLY","PAN","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","_EPS","OrbitControls","constructor","object","domElement","state","target","cursor","minDistance","maxDistance","Infinity","minZoom","maxZoom","minTargetRadius","maxTargetRadius","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","keyRotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MIDDLE","touches","ONE","TWO","DOLLY_PAN","target0","clone","position0","position","zoom0","zoom","_domElementKeyEvents","_lastPosition","_lastQuaternion","_lastTargetPosition","_quat","setFromUnitVectors","up","_quatInverse","invert","_spherical","_sphericalDelta","_scale","_panOffset","_rotateStart","_rotateEnd","_rotateDelta","_panStart","_panEnd","_panDelta","_dollyStart","_dollyEnd","_dollyDelta","_dollyDirection","_mouse","_performCursorZoom","_pointers","_pointerPositions","_controlActive","_onPointerMove","onPointerMove","bind","_onPointerDown","onPointerDown","_onPointerUp","onPointerUp","_onContextMenu","onContextMenu","_onMouseWheel","onMouseWheel","_onKeyDown","onKeyDown","_onTouchStart","onTouchStart","_onTouchMove","onTouchMove","_onMouseDown","onMouseDown","_onMouseMove","onMouseMove","_interceptControlDown","interceptControlDown","_interceptControlUp","interceptControlUp","connect","update","element","addEventListener","passive","document","getRootNode","capture","style","touchAction","disconnect","removeEventListener","stopListenToKeyEvents","dispose","getPolarAngle","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","saveState","copy","reset","updateProjectionMatrix","dispatchEvent","deltaTime","sub","applyQuaternion","setFromVector3","_rotateLeft","_getAutoRotationAngle","min","max","isFinite","makeSafe","addScaledVector","add","clampLength","zoomChanged","isOrthographicCamera","radius","_clampDistance","prevRadius","setFromSpherical","lookAt","multiplyScalar","set","newRadius","isPerspectiveCamera","length","radiusDelta","updateMatrixWorld","mouseBefore","x","y","unproject","prevZoom","mouseAfter","console","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","quaternion","_getZoomScale","delta","normalizedDelta","pow","angle","_rotateUp","_panLeft","distance","objectMatrix","setFromMatrixColumn","_panUp","crossVectors","_pan","deltaX","deltaY","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","_dollyOut","dollyScale","_dollyIn","_updateZoomParameters","rect","getBoundingClientRect","dx","dy","w","width","h","height","normalize","dist","_handleMouseDownRotate","event","clientX","clientY","_handleMouseDownDolly","_handleMouseDownPan","_handleMouseMoveRotate","subVectors","_handleMouseMoveDolly","_handleMouseMovePan","_handleMouseWheel","_handleKeyDown","needsUpdate","code","ctrlKey","metaKey","shiftKey","preventDefault","_handleTouchStartRotate","pageX","pageY","_getSecondPointerPosition","_handleTouchStartPan","_handleTouchStartDolly","sqrt","_handleTouchStartDollyPan","_handleTouchStartDollyRotate","_handleTouchMoveRotate","_handleTouchMovePan","_handleTouchMoveDolly","centerX","centerY","_handleTouchMoveDollyPan","_handleTouchMoveDollyRotate","_addPointer","push","pointerId","_removePointer","i","splice","_isTrackingPointer","_trackPointer","undefined","_customWheelEvent","mode","deltaMode","newEvent","enabled","setPointerCapture","pointerType","releasePointerCapture","mouseAction","button","DOLLY_ROTATE","key"],"sources":["C:/Users/draza/classforge/classforge-frontend/node_modules/three/examples/jsm/controls/OrbitControls.js"],"sourcesContent":["import {\n\tControls,\n\tMOUSE,\n\tQuaternion,\n\tSpherical,\n\tTOUCH,\n\tVector2,\n\tVector3,\n\tPlane,\n\tRay,\n\tMathUtils\n} from 'three';\n\n/**\n * Fires when the camera has been transformed by the controls.\n *\n * @event OrbitControls#change\n * @type {Object}\n */\nconst _changeEvent = { type: 'change' };\n\n/**\n * Fires when an interaction was initiated.\n *\n * @event OrbitControls#start\n * @type {Object}\n */\nconst _startEvent = { type: 'start' };\n\n/**\n * Fires when an interaction has finished.\n *\n * @event OrbitControls#end\n * @type {Object}\n */\nconst _endEvent = { type: 'end' };\n\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst _TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nconst _v = new Vector3();\nconst _twoPI = 2 * Math.PI;\n\nconst _STATE = {\n\tNONE: - 1,\n\tROTATE: 0,\n\tDOLLY: 1,\n\tPAN: 2,\n\tTOUCH_ROTATE: 3,\n\tTOUCH_PAN: 4,\n\tTOUCH_DOLLY_PAN: 5,\n\tTOUCH_DOLLY_ROTATE: 6\n};\nconst _EPS = 0.000001;\n\n\n/**\n * Orbit controls allow the camera to orbit around a target.\n *\n * OrbitControls performs orbiting, dollying (zooming), and panning. Unlike {@link TrackballControls},\n * it maintains the \"up\" direction `object.up` (+Y by default).\n *\n * - Orbit: Left mouse / touch: one-finger move.\n * - Zoom: Middle mouse, or mousewheel / touch: two-finger spread or squish.\n * - Pan: Right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move.\n *\n * ```js\n * const controls = new OrbitControls( camera, renderer.domElement );\n *\n * // controls.update() must be called after any manual changes to the camera's transform\n * camera.position.set( 0, 20, 100 );\n * controls.update();\n *\n * function animate() {\n *\n * \t// required if controls.enableDamping or controls.autoRotate are set to true\n * \tcontrols.update();\n *\n * \trenderer.render( scene, camera );\n *\n * }\n * ```\n *\n * @augments Controls\n */\nclass OrbitControls extends Controls {\n\n\t/**\n\t * Constructs a new controls instance.\n\t *\n\t * @param {Object3D} object - The object that is managed by the controls.\n\t * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n\t */\n\tconstructor( object, domElement = null ) {\n\n\t\tsuper( object, domElement );\n\n\t\tthis.state = _STATE.NONE;\n\n\t\t/**\n\t\t * The focus point of the controls, the `object` orbits around this.\n\t\t * It can be updated manually at any point to change the focus of the controls.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.target = new Vector3();\n\n\t\t/**\n\t\t * The focus point of the `minTargetRadius` and `maxTargetRadius` limits.\n\t\t * It can be updated manually at any point to change the center of interest\n\t\t * for the `target`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.cursor = new Vector3();\n\n\t\t/**\n\t\t * How far you can dolly in (perspective camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minDistance = 0;\n\n\t\t/**\n\t\t * How far you can dolly out (perspective camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.maxDistance = Infinity;\n\n\t\t/**\n\t\t * How far you can zoom in (orthographic camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minZoom = 0;\n\n\t\t/**\n\t\t * How far you can zoom out (orthographic camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.maxZoom = Infinity;\n\n\t\t/**\n\t\t * How close you can get the target to the 3D `cursor`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minTargetRadius = 0;\n\n\t\t/**\n\t\t * How far you can move the target from the 3D `cursor`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.maxTargetRadius = Infinity;\n\n\t\t/**\n\t\t * How far you can orbit vertically, lower limit. Range is `[0, Math.PI]` radians.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minPolarAngle = 0;\n\n\t\t/**\n\t\t * How far you can orbit vertically, upper limit. Range is `[0, Math.PI]` radians.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Math.PI\n\t\t */\n\t\tthis.maxPolarAngle = Math.PI;\n\n\t\t/**\n\t\t * How far you can orbit horizontally, lower limit. If set, the interval `[ min, max ]`\n\t\t * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -Infinity\n\t\t */\n\t\tthis.minAzimuthAngle = - Infinity;\n\n\t\t/**\n\t\t * How far you can orbit horizontally, upper limit. If set, the interval `[ min, max ]`\n\t\t * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -Infinity\n\t\t */\n\t\tthis.maxAzimuthAngle = Infinity;\n\n\t\t/**\n\t\t * Set to `true` to enable damping (inertia), which can be used to give a sense of weight\n\t\t * to the controls. Note that if this is enabled, you must call `update()` in your animation\n\t\t * loop.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.enableDamping = false;\n\n\t\t/**\n\t\t * The damping inertia used if `enableDamping` is set to `true`.\n\t\t *\n\t\t * Note that for this to work, you must call `update()` in your animation loop.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.05\n\t\t */\n\t\tthis.dampingFactor = 0.05;\n\n\t\t/**\n\t\t * Enable or disable zooming (dollying) of the camera.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enableZoom = true;\n\n\t\t/**\n\t\t * Speed of zooming / dollying.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t/**\n\t\t * Enable or disable horizontal and vertical rotation of the camera.\n\t\t *\n\t\t * Note that it is possible to disable a single axis by setting the min and max of the\n\t\t * `minPolarAngle` or `minAzimuthAngle` to the same value, which will cause the vertical\n\t\t * or horizontal rotation to be fixed at that value.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enableRotate = true;\n\n\t\t/**\n\t\t * Speed of rotation.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.rotateSpeed = 1.0;\n\n\t\t/**\n\t\t * How fast to rotate the camera when the keyboard is used.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.keyRotateSpeed = 1.0;\n\n\t\t/**\n\t\t * Enable or disable camera panning.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enablePan = true;\n\n\t\t/**\n\t\t * Speed of panning.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.panSpeed = 1.0;\n\n\t\t/**\n\t\t * Defines how the camera's position is translated when panning. If `true`, the camera pans\n\t\t * in screen space. Otherwise, the camera pans in the plane orthogonal to the camera's up\n\t\t * direction.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.screenSpacePanning = true;\n\n\t\t/**\n\t\t * How fast to pan the camera when the keyboard is used in\n\t\t * pixels per keypress.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 7\n\t\t */\n\t\tthis.keyPanSpeed = 7.0;\n\n\t\t/**\n\t\t * Setting this property to `true` allows to zoom to the cursor's position.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.zoomToCursor = false;\n\n\t\t/**\n\t\t * Set to true to automatically rotate around the target\n\t\t *\n\t\t * Note that if this is enabled, you must call `update()` in your animation loop.\n\t\t * If you want the auto-rotate speed to be independent of the frame rate (the refresh\n\t\t * rate of the display), you must pass the time `deltaTime`, in seconds, to `update()`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.autoRotate = false;\n\n\t\t/**\n\t\t * How fast to rotate around the target if `autoRotate` is `true`. The default  equates to 30 seconds\n\t\t * per orbit at 60fps.\n\t\t *\n\t\t * Note that if `autoRotate` is enabled, you must call `update()` in your animation loop.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.autoRotateSpeed = 2.0;\n\n\t\t/**\n\t\t * This object contains references to the keycodes for controlling camera panning.\n\t\t *\n\t\t * ```js\n\t\t * controls.keys = {\n\t\t * \tLEFT: 'ArrowLeft', //left arrow\n\t\t * \tUP: 'ArrowUp', // up arrow\n\t\t * \tRIGHT: 'ArrowRight', // right arrow\n\t\t * \tBOTTOM: 'ArrowDown' // down arrow\n\t\t * }\n\t\t * ```\n\t\t * @type {Object}\n\t\t */\n\t\tthis.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };\n\n\t\t/**\n\t\t * This object contains references to the mouse actions used by the controls.\n\t\t *\n\t\t * ```js\n\t\t * controls.mouseButtons = {\n\t\t * \tLEFT: THREE.MOUSE.ROTATE,\n\t\t * \tMIDDLE: THREE.MOUSE.DOLLY,\n\t\t * \tRIGHT: THREE.MOUSE.PAN\n\t\t * }\n\t\t * ```\n\t\t * @type {Object}\n\t\t */\n\t\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n\t\t/**\n\t\t * This object contains references to the touch actions used by the controls.\n\t\t *\n\t\t * ```js\n\t\t * controls.mouseButtons = {\n\t\t * \tONE: THREE.TOUCH.ROTATE,\n\t\t * \tTWO: THREE.TOUCH.DOLLY_PAN\n\t\t * }\n\t\t * ```\n\t\t * @type {Object}\n\t\t */\n\t\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n\t\t/**\n\t\t * Used internally by `saveState()` and `reset()`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.target0 = this.target.clone();\n\n\t\t/**\n\t\t * Used internally by `saveState()` and `reset()`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.position0 = this.object.position.clone();\n\n\t\t/**\n\t\t * Used internally by `saveState()` and `reset()`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.zoom0 = this.object.zoom;\n\n\t\t// the target DOM element for key events\n\t\tthis._domElementKeyEvents = null;\n\n\t\t// internals\n\n\t\tthis._lastPosition = new Vector3();\n\t\tthis._lastQuaternion = new Quaternion();\n\t\tthis._lastTargetPosition = new Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tthis._quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n\t\tthis._quatInverse = this._quat.clone().invert();\n\n\t\t// current position in spherical coordinates\n\t\tthis._spherical = new Spherical();\n\t\tthis._sphericalDelta = new Spherical();\n\n\t\tthis._scale = 1;\n\t\tthis._panOffset = new Vector3();\n\n\t\tthis._rotateStart = new Vector2();\n\t\tthis._rotateEnd = new Vector2();\n\t\tthis._rotateDelta = new Vector2();\n\n\t\tthis._panStart = new Vector2();\n\t\tthis._panEnd = new Vector2();\n\t\tthis._panDelta = new Vector2();\n\n\t\tthis._dollyStart = new Vector2();\n\t\tthis._dollyEnd = new Vector2();\n\t\tthis._dollyDelta = new Vector2();\n\n\t\tthis._dollyDirection = new Vector3();\n\t\tthis._mouse = new Vector2();\n\t\tthis._performCursorZoom = false;\n\n\t\tthis._pointers = [];\n\t\tthis._pointerPositions = {};\n\n\t\tthis._controlActive = false;\n\n\t\t// event listeners\n\n\t\tthis._onPointerMove = onPointerMove.bind( this );\n\t\tthis._onPointerDown = onPointerDown.bind( this );\n\t\tthis._onPointerUp = onPointerUp.bind( this );\n\t\tthis._onContextMenu = onContextMenu.bind( this );\n\t\tthis._onMouseWheel = onMouseWheel.bind( this );\n\t\tthis._onKeyDown = onKeyDown.bind( this );\n\n\t\tthis._onTouchStart = onTouchStart.bind( this );\n\t\tthis._onTouchMove = onTouchMove.bind( this );\n\n\t\tthis._onMouseDown = onMouseDown.bind( this );\n\t\tthis._onMouseMove = onMouseMove.bind( this );\n\n\t\tthis._interceptControlDown = interceptControlDown.bind( this );\n\t\tthis._interceptControlUp = interceptControlUp.bind( this );\n\n\t\t//\n\n\t\tif ( this.domElement !== null ) {\n\n\t\t\tthis.connect( this.domElement );\n\n\t\t}\n\n\t\tthis.update();\n\n\t}\n\n\tconnect( element ) {\n\n\t\tsuper.connect( element );\n\n\t\tthis.domElement.addEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.addEventListener( 'pointercancel', this._onPointerUp );\n\n\t\tthis.domElement.addEventListener( 'contextmenu', this._onContextMenu );\n\t\tthis.domElement.addEventListener( 'wheel', this._onMouseWheel, { passive: false } );\n\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\t\tdocument.addEventListener( 'keydown', this._interceptControlDown, { passive: true, capture: true } );\n\n\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\n\n\t}\n\n\tdisconnect() {\n\n\t\tthis.domElement.removeEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\t\tthis.domElement.removeEventListener( 'pointerup', this._onPointerUp );\n\t\tthis.domElement.removeEventListener( 'pointercancel', this._onPointerUp );\n\n\t\tthis.domElement.removeEventListener( 'wheel', this._onMouseWheel );\n\t\tthis.domElement.removeEventListener( 'contextmenu', this._onContextMenu );\n\n\t\tthis.stopListenToKeyEvents();\n\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\t\tdocument.removeEventListener( 'keydown', this._interceptControlDown, { capture: true } );\n\n\t\tthis.domElement.style.touchAction = 'auto';\n\n\t}\n\n\tdispose() {\n\n\t\tthis.disconnect();\n\n\t}\n\n\t/**\n\t * Get the current vertical rotation, in radians.\n\t *\n\t * @return {number} The current vertical rotation, in radians.\n\t */\n\tgetPolarAngle() {\n\n\t\treturn this._spherical.phi;\n\n\t}\n\n\t/**\n\t * Get the current horizontal rotation, in radians.\n\t *\n\t * @return {number} The current horizontal rotation, in radians.\n\t */\n\tgetAzimuthalAngle() {\n\n\t\treturn this._spherical.theta;\n\n\t}\n\n\t/**\n\t * Returns the distance from the camera to the target.\n\t *\n\t * @return {number} The distance from the camera to the target.\n\t */\n\tgetDistance() {\n\n\t\treturn this.object.position.distanceTo( this.target );\n\n\t}\n\n\t/**\n\t * Adds key event listeners to the given DOM element.\n\t * `window` is a recommended argument for using this method.\n\t *\n\t * @param {HTMLDOMElement} domElement - The DOM element\n\t */\n\tlistenToKeyEvents( domElement ) {\n\n\t\tdomElement.addEventListener( 'keydown', this._onKeyDown );\n\t\tthis._domElementKeyEvents = domElement;\n\n\t}\n\n\t/**\n\t * Removes the key event listener previously defined with `listenToKeyEvents()`.\n\t */\n\tstopListenToKeyEvents() {\n\n\t\tif ( this._domElementKeyEvents !== null ) {\n\n\t\t\tthis._domElementKeyEvents.removeEventListener( 'keydown', this._onKeyDown );\n\t\t\tthis._domElementKeyEvents = null;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Save the current state of the controls. This can later be recovered with `reset()`.\n\t */\n\tsaveState() {\n\n\t\tthis.target0.copy( this.target );\n\t\tthis.position0.copy( this.object.position );\n\t\tthis.zoom0 = this.object.zoom;\n\n\t}\n\n\t/**\n\t * Reset the controls to their state from either the last time the `saveState()`\n\t * was called, or the initial state.\n\t */\n\treset() {\n\n\t\tthis.target.copy( this.target0 );\n\t\tthis.object.position.copy( this.position0 );\n\t\tthis.object.zoom = this.zoom0;\n\n\t\tthis.object.updateProjectionMatrix();\n\t\tthis.dispatchEvent( _changeEvent );\n\n\t\tthis.update();\n\n\t\tthis.state = _STATE.NONE;\n\n\t}\n\n\tupdate( deltaTime = null ) {\n\n\t\tconst position = this.object.position;\n\n\t\t_v.copy( position ).sub( this.target );\n\n\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t_v.applyQuaternion( this._quat );\n\n\t\t// angle from z-axis around y-axis\n\t\tthis._spherical.setFromVector3( _v );\n\n\t\tif ( this.autoRotate && this.state === _STATE.NONE ) {\n\n\t\t\tthis._rotateLeft( this._getAutoRotationAngle( deltaTime ) );\n\n\t\t}\n\n\t\tif ( this.enableDamping ) {\n\n\t\t\tthis._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;\n\t\t\tthis._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;\n\n\t\t} else {\n\n\t\t\tthis._spherical.theta += this._sphericalDelta.theta;\n\t\t\tthis._spherical.phi += this._sphericalDelta.phi;\n\n\t\t}\n\n\t\t// restrict theta to be between desired limits\n\n\t\tlet min = this.minAzimuthAngle;\n\t\tlet max = this.maxAzimuthAngle;\n\n\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\tif ( min < - Math.PI ) min += _twoPI; else if ( min > Math.PI ) min -= _twoPI;\n\n\t\t\tif ( max < - Math.PI ) max += _twoPI; else if ( max > Math.PI ) max -= _twoPI;\n\n\t\t\tif ( min <= max ) {\n\n\t\t\t\tthis._spherical.theta = Math.max( min, Math.min( max, this._spherical.theta ) );\n\n\t\t\t} else {\n\n\t\t\t\tthis._spherical.theta = ( this._spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\tMath.max( min, this._spherical.theta ) :\n\t\t\t\t\tMath.min( max, this._spherical.theta );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restrict phi to be between desired limits\n\t\tthis._spherical.phi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, this._spherical.phi ) );\n\n\t\tthis._spherical.makeSafe();\n\n\n\t\t// move target to panned location\n\n\t\tif ( this.enableDamping === true ) {\n\n\t\t\tthis.target.addScaledVector( this._panOffset, this.dampingFactor );\n\n\t\t} else {\n\n\t\t\tthis.target.add( this._panOffset );\n\n\t\t}\n\n\t\t// Limit the target distance from the cursor to create a sphere around the center of interest\n\t\tthis.target.sub( this.cursor );\n\t\tthis.target.clampLength( this.minTargetRadius, this.maxTargetRadius );\n\t\tthis.target.add( this.cursor );\n\n\t\tlet zoomChanged = false;\n\t\t// adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n\t\t// we adjust zoom later in these cases\n\t\tif ( this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera ) {\n\n\t\t\tthis._spherical.radius = this._clampDistance( this._spherical.radius );\n\n\t\t} else {\n\n\t\t\tconst prevRadius = this._spherical.radius;\n\t\t\tthis._spherical.radius = this._clampDistance( this._spherical.radius * this._scale );\n\t\t\tzoomChanged = prevRadius != this._spherical.radius;\n\n\t\t}\n\n\t\t_v.setFromSpherical( this._spherical );\n\n\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t_v.applyQuaternion( this._quatInverse );\n\n\t\tposition.copy( this.target ).add( _v );\n\n\t\tthis.object.lookAt( this.target );\n\n\t\tif ( this.enableDamping === true ) {\n\n\t\t\tthis._sphericalDelta.theta *= ( 1 - this.dampingFactor );\n\t\t\tthis._sphericalDelta.phi *= ( 1 - this.dampingFactor );\n\n\t\t\tthis._panOffset.multiplyScalar( 1 - this.dampingFactor );\n\n\t\t} else {\n\n\t\t\tthis._sphericalDelta.set( 0, 0, 0 );\n\n\t\t\tthis._panOffset.set( 0, 0, 0 );\n\n\t\t}\n\n\t\t// adjust camera position\n\t\tif ( this.zoomToCursor && this._performCursorZoom ) {\n\n\t\t\tlet newRadius = null;\n\t\t\tif ( this.object.isPerspectiveCamera ) {\n\n\t\t\t\t// move the camera down the pointer ray\n\t\t\t\t// this method avoids floating point error\n\t\t\t\tconst prevRadius = _v.length();\n\t\t\t\tnewRadius = this._clampDistance( prevRadius * this._scale );\n\n\t\t\t\tconst radiusDelta = prevRadius - newRadius;\n\t\t\t\tthis.object.position.addScaledVector( this._dollyDirection, radiusDelta );\n\t\t\t\tthis.object.updateMatrixWorld();\n\n\t\t\t\tzoomChanged = !! radiusDelta;\n\n\t\t\t} else if ( this.object.isOrthographicCamera ) {\n\n\t\t\t\t// adjust the ortho camera position based on zoom changes\n\t\t\t\tconst mouseBefore = new Vector3( this._mouse.x, this._mouse.y, 0 );\n\t\t\t\tmouseBefore.unproject( this.object );\n\n\t\t\t\tconst prevZoom = this.object.zoom;\n\t\t\t\tthis.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / this._scale ) );\n\t\t\t\tthis.object.updateProjectionMatrix();\n\n\t\t\t\tzoomChanged = prevZoom !== this.object.zoom;\n\n\t\t\t\tconst mouseAfter = new Vector3( this._mouse.x, this._mouse.y, 0 );\n\t\t\t\tmouseAfter.unproject( this.object );\n\n\t\t\t\tthis.object.position.sub( mouseAfter ).add( mouseBefore );\n\t\t\t\tthis.object.updateMatrixWorld();\n\n\t\t\t\tnewRadius = _v.length();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n\t\t\t\tthis.zoomToCursor = false;\n\n\t\t\t}\n\n\t\t\t// handle the placement of the target\n\t\t\tif ( newRadius !== null ) {\n\n\t\t\t\tif ( this.screenSpacePanning ) {\n\n\t\t\t\t\t// position the orbit target in front of the new camera position\n\t\t\t\t\tthis.target.set( 0, 0, - 1 )\n\t\t\t\t\t\t.transformDirection( this.object.matrix )\n\t\t\t\t\t\t.multiplyScalar( newRadius )\n\t\t\t\t\t\t.add( this.object.position );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// get the ray and translation plane to compute target\n\t\t\t\t\t_ray.origin.copy( this.object.position );\n\t\t\t\t\t_ray.direction.set( 0, 0, - 1 ).transformDirection( this.object.matrix );\n\n\t\t\t\t\t// if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n\t\t\t\t\t// extremely large values\n\t\t\t\t\tif ( Math.abs( this.object.up.dot( _ray.direction ) ) < _TILT_LIMIT ) {\n\n\t\t\t\t\t\tthis.object.lookAt( this.target );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_plane.setFromNormalAndCoplanarPoint( this.object.up, this.target );\n\t\t\t\t\t\t_ray.intersectPlane( _plane, this.target );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( this.object.isOrthographicCamera ) {\n\n\t\t\tconst prevZoom = this.object.zoom;\n\t\t\tthis.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / this._scale ) );\n\n\t\t\tif ( prevZoom !== this.object.zoom ) {\n\n\t\t\t\tthis.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._scale = 1;\n\t\tthis._performCursorZoom = false;\n\n\t\t// update condition is:\n\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\tif ( zoomChanged ||\n\t\t\tthis._lastPosition.distanceToSquared( this.object.position ) > _EPS ||\n\t\t\t8 * ( 1 - this._lastQuaternion.dot( this.object.quaternion ) ) > _EPS ||\n\t\t\tthis._lastTargetPosition.distanceToSquared( this.target ) > _EPS ) {\n\n\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t\tthis._lastPosition.copy( this.object.position );\n\t\t\tthis._lastQuaternion.copy( this.object.quaternion );\n\t\t\tthis._lastTargetPosition.copy( this.target );\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t_getAutoRotationAngle( deltaTime ) {\n\n\t\tif ( deltaTime !== null ) {\n\n\t\t\treturn ( _twoPI / 60 * this.autoRotateSpeed ) * deltaTime;\n\n\t\t} else {\n\n\t\t\treturn _twoPI / 60 / 60 * this.autoRotateSpeed;\n\n\t\t}\n\n\t}\n\n\t_getZoomScale( delta ) {\n\n\t\tconst normalizedDelta = Math.abs( delta * 0.01 );\n\t\treturn Math.pow( 0.95, this.zoomSpeed * normalizedDelta );\n\n\t}\n\n\t_rotateLeft( angle ) {\n\n\t\tthis._sphericalDelta.theta -= angle;\n\n\t}\n\n\t_rotateUp( angle ) {\n\n\t\tthis._sphericalDelta.phi -= angle;\n\n\t}\n\n\t_panLeft( distance, objectMatrix ) {\n\n\t\t_v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t_v.multiplyScalar( - distance );\n\n\t\tthis._panOffset.add( _v );\n\n\t}\n\n\t_panUp( distance, objectMatrix ) {\n\n\t\tif ( this.screenSpacePanning === true ) {\n\n\t\t\t_v.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t} else {\n\n\t\t\t_v.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t_v.crossVectors( this.object.up, _v );\n\n\t\t}\n\n\t\t_v.multiplyScalar( distance );\n\n\t\tthis._panOffset.add( _v );\n\n\t}\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\t_pan( deltaX, deltaY ) {\n\n\t\tconst element = this.domElement;\n\n\t\tif ( this.object.isPerspectiveCamera ) {\n\n\t\t\t// perspective\n\t\t\tconst position = this.object.position;\n\t\t\t_v.copy( position ).sub( this.target );\n\t\t\tlet targetDistance = _v.length();\n\n\t\t\t// half of the fov is center to top of screen\n\t\t\ttargetDistance *= Math.tan( ( this.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\tthis._panLeft( 2 * deltaX * targetDistance / element.clientHeight, this.object.matrix );\n\t\t\tthis._panUp( 2 * deltaY * targetDistance / element.clientHeight, this.object.matrix );\n\n\t\t} else if ( this.object.isOrthographicCamera ) {\n\n\t\t\t// orthographic\n\t\t\tthis._panLeft( deltaX * ( this.object.right - this.object.left ) / this.object.zoom / element.clientWidth, this.object.matrix );\n\t\t\tthis._panUp( deltaY * ( this.object.top - this.object.bottom ) / this.object.zoom / element.clientHeight, this.object.matrix );\n\n\t\t} else {\n\n\t\t\t// camera neither orthographic nor perspective\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\tthis.enablePan = false;\n\n\t\t}\n\n\t}\n\n\t_dollyOut( dollyScale ) {\n\n\t\tif ( this.object.isPerspectiveCamera || this.object.isOrthographicCamera ) {\n\n\t\t\tthis._scale /= dollyScale;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tthis.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t_dollyIn( dollyScale ) {\n\n\t\tif ( this.object.isPerspectiveCamera || this.object.isOrthographicCamera ) {\n\n\t\t\tthis._scale *= dollyScale;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tthis.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t_updateZoomParameters( x, y ) {\n\n\t\tif ( ! this.zoomToCursor ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._performCursorZoom = true;\n\n\t\tconst rect = this.domElement.getBoundingClientRect();\n\t\tconst dx = x - rect.left;\n\t\tconst dy = y - rect.top;\n\t\tconst w = rect.width;\n\t\tconst h = rect.height;\n\n\t\tthis._mouse.x = ( dx / w ) * 2 - 1;\n\t\tthis._mouse.y = - ( dy / h ) * 2 + 1;\n\n\t\tthis._dollyDirection.set( this._mouse.x, this._mouse.y, 1 ).unproject( this.object ).sub( this.object.position ).normalize();\n\n\t}\n\n\t_clampDistance( dist ) {\n\n\t\treturn Math.max( this.minDistance, Math.min( this.maxDistance, dist ) );\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\t_handleMouseDownRotate( event ) {\n\n\t\tthis._rotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\t_handleMouseDownDolly( event ) {\n\n\t\tthis._updateZoomParameters( event.clientX, event.clientX );\n\t\tthis._dollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\t_handleMouseDownPan( event ) {\n\n\t\tthis._panStart.set( event.clientX, event.clientY );\n\n\t}\n\n\t_handleMouseMoveRotate( event ) {\n\n\t\tthis._rotateEnd.set( event.clientX, event.clientY );\n\n\t\tthis._rotateDelta.subVectors( this._rotateEnd, this._rotateStart ).multiplyScalar( this.rotateSpeed );\n\n\t\tconst element = this.domElement;\n\n\t\tthis._rotateLeft( _twoPI * this._rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\tthis._rotateUp( _twoPI * this._rotateDelta.y / element.clientHeight );\n\n\t\tthis._rotateStart.copy( this._rotateEnd );\n\n\t\tthis.update();\n\n\t}\n\n\t_handleMouseMoveDolly( event ) {\n\n\t\tthis._dollyEnd.set( event.clientX, event.clientY );\n\n\t\tthis._dollyDelta.subVectors( this._dollyEnd, this._dollyStart );\n\n\t\tif ( this._dollyDelta.y > 0 ) {\n\n\t\t\tthis._dollyOut( this._getZoomScale( this._dollyDelta.y ) );\n\n\t\t} else if ( this._dollyDelta.y < 0 ) {\n\n\t\t\tthis._dollyIn( this._getZoomScale( this._dollyDelta.y ) );\n\n\t\t}\n\n\t\tthis._dollyStart.copy( this._dollyEnd );\n\n\t\tthis.update();\n\n\t}\n\n\t_handleMouseMovePan( event ) {\n\n\t\tthis._panEnd.set( event.clientX, event.clientY );\n\n\t\tthis._panDelta.subVectors( this._panEnd, this._panStart ).multiplyScalar( this.panSpeed );\n\n\t\tthis._pan( this._panDelta.x, this._panDelta.y );\n\n\t\tthis._panStart.copy( this._panEnd );\n\n\t\tthis.update();\n\n\t}\n\n\t_handleMouseWheel( event ) {\n\n\t\tthis._updateZoomParameters( event.clientX, event.clientY );\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tthis._dollyIn( this._getZoomScale( event.deltaY ) );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tthis._dollyOut( this._getZoomScale( event.deltaY ) );\n\n\t\t}\n\n\t\tthis.update();\n\n\t}\n\n\t_handleKeyDown( event ) {\n\n\t\tlet needsUpdate = false;\n\n\t\tswitch ( event.code ) {\n\n\t\t\tcase this.keys.UP:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( this.enableRotate ) {\n\n\t\t\t\t\t\tthis._rotateUp( _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( this.enablePan ) {\n\n\t\t\t\t\t\tthis._pan( 0, this.keyPanSpeed );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase this.keys.BOTTOM:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( this.enableRotate ) {\n\n\t\t\t\t\t\tthis._rotateUp( - _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( this.enablePan ) {\n\n\t\t\t\t\t\tthis._pan( 0, - this.keyPanSpeed );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase this.keys.LEFT:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( this.enableRotate ) {\n\n\t\t\t\t\t\tthis._rotateLeft( _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( this.enablePan ) {\n\n\t\t\t\t\t\tthis._pan( this.keyPanSpeed, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase this.keys.RIGHT:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( this.enableRotate ) {\n\n\t\t\t\t\t\tthis._rotateLeft( - _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( this.enablePan ) {\n\n\t\t\t\t\t\tthis._pan( - this.keyPanSpeed, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tthis.update();\n\n\t\t}\n\n\n\t}\n\n\t_handleTouchStartRotate( event ) {\n\n\t\tif ( this._pointers.length === 1 ) {\n\n\t\t\tthis._rotateStart.set( event.pageX, event.pageY );\n\n\t\t} else {\n\n\t\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\tthis._rotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\t_handleTouchStartPan( event ) {\n\n\t\tif ( this._pointers.length === 1 ) {\n\n\t\t\tthis._panStart.set( event.pageX, event.pageY );\n\n\t\t} else {\n\n\t\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\tthis._panStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\t_handleTouchStartDolly( event ) {\n\n\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\tconst dx = event.pageX - position.x;\n\t\tconst dy = event.pageY - position.y;\n\n\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tthis._dollyStart.set( 0, distance );\n\n\t}\n\n\t_handleTouchStartDollyPan( event ) {\n\n\t\tif ( this.enableZoom ) this._handleTouchStartDolly( event );\n\n\t\tif ( this.enablePan ) this._handleTouchStartPan( event );\n\n\t}\n\n\t_handleTouchStartDollyRotate( event ) {\n\n\t\tif ( this.enableZoom ) this._handleTouchStartDolly( event );\n\n\t\tif ( this.enableRotate ) this._handleTouchStartRotate( event );\n\n\t}\n\n\t_handleTouchMoveRotate( event ) {\n\n\t\tif ( this._pointers.length == 1 ) {\n\n\t\t\tthis._rotateEnd.set( event.pageX, event.pageY );\n\n\t\t} else {\n\n\t\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\tthis._rotateEnd.set( x, y );\n\n\t\t}\n\n\t\tthis._rotateDelta.subVectors( this._rotateEnd, this._rotateStart ).multiplyScalar( this.rotateSpeed );\n\n\t\tconst element = this.domElement;\n\n\t\tthis._rotateLeft( _twoPI * this._rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\tthis._rotateUp( _twoPI * this._rotateDelta.y / element.clientHeight );\n\n\t\tthis._rotateStart.copy( this._rotateEnd );\n\n\t}\n\n\t_handleTouchMovePan( event ) {\n\n\t\tif ( this._pointers.length === 1 ) {\n\n\t\t\tthis._panEnd.set( event.pageX, event.pageY );\n\n\t\t} else {\n\n\t\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\tthis._panEnd.set( x, y );\n\n\t\t}\n\n\t\tthis._panDelta.subVectors( this._panEnd, this._panStart ).multiplyScalar( this.panSpeed );\n\n\t\tthis._pan( this._panDelta.x, this._panDelta.y );\n\n\t\tthis._panStart.copy( this._panEnd );\n\n\t}\n\n\t_handleTouchMoveDolly( event ) {\n\n\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\tconst dx = event.pageX - position.x;\n\t\tconst dy = event.pageY - position.y;\n\n\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tthis._dollyEnd.set( 0, distance );\n\n\t\tthis._dollyDelta.set( 0, Math.pow( this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed ) );\n\n\t\tthis._dollyOut( this._dollyDelta.y );\n\n\t\tthis._dollyStart.copy( this._dollyEnd );\n\n\t\tconst centerX = ( event.pageX + position.x ) * 0.5;\n\t\tconst centerY = ( event.pageY + position.y ) * 0.5;\n\n\t\tthis._updateZoomParameters( centerX, centerY );\n\n\t}\n\n\t_handleTouchMoveDollyPan( event ) {\n\n\t\tif ( this.enableZoom ) this._handleTouchMoveDolly( event );\n\n\t\tif ( this.enablePan ) this._handleTouchMovePan( event );\n\n\t}\n\n\t_handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( this.enableZoom ) this._handleTouchMoveDolly( event );\n\n\t\tif ( this.enableRotate ) this._handleTouchMoveRotate( event );\n\n\t}\n\n\t// pointers\n\n\t_addPointer( event ) {\n\n\t\tthis._pointers.push( event.pointerId );\n\n\t}\n\n\t_removePointer( event ) {\n\n\t\tdelete this._pointerPositions[ event.pointerId ];\n\n\t\tfor ( let i = 0; i < this._pointers.length; i ++ ) {\n\n\t\t\tif ( this._pointers[ i ] == event.pointerId ) {\n\n\t\t\t\tthis._pointers.splice( i, 1 );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_isTrackingPointer( event ) {\n\n\t\tfor ( let i = 0; i < this._pointers.length; i ++ ) {\n\n\t\t\tif ( this._pointers[ i ] == event.pointerId ) return true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t_trackPointer( event ) {\n\n\t\tlet position = this._pointerPositions[ event.pointerId ];\n\n\t\tif ( position === undefined ) {\n\n\t\t\tposition = new Vector2();\n\t\t\tthis._pointerPositions[ event.pointerId ] = position;\n\n\t\t}\n\n\t\tposition.set( event.pageX, event.pageY );\n\n\t}\n\n\t_getSecondPointerPosition( event ) {\n\n\t\tconst pointerId = ( event.pointerId === this._pointers[ 0 ] ) ? this._pointers[ 1 ] : this._pointers[ 0 ];\n\n\t\treturn this._pointerPositions[ pointerId ];\n\n\t}\n\n\t//\n\n\t_customWheelEvent( event ) {\n\n\t\tconst mode = event.deltaMode;\n\n\t\t// minimal wheel event altered to meet delta-zoom demand\n\t\tconst newEvent = {\n\t\t\tclientX: event.clientX,\n\t\t\tclientY: event.clientY,\n\t\t\tdeltaY: event.deltaY,\n\t\t};\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase 1: // LINE_MODE\n\t\t\t\tnewEvent.deltaY *= 16;\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // PAGE_MODE\n\t\t\t\tnewEvent.deltaY *= 100;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t// detect if event was triggered by pinching\n\t\tif ( event.ctrlKey && ! this._controlActive ) {\n\n\t\t\tnewEvent.deltaY *= 10;\n\n\t\t}\n\n\t\treturn newEvent;\n\n\t}\n\n}\n\nfunction onPointerDown( event ) {\n\n\tif ( this.enabled === false ) return;\n\n\tif ( this._pointers.length === 0 ) {\n\n\t\tthis.domElement.setPointerCapture( event.pointerId );\n\n\t\tthis.domElement.addEventListener( 'pointermove', this._onPointerMove );\n\t\tthis.domElement.addEventListener( 'pointerup', this._onPointerUp );\n\n\t}\n\n\t//\n\n\tif ( this._isTrackingPointer( event ) ) return;\n\n\t//\n\n\tthis._addPointer( event );\n\n\tif ( event.pointerType === 'touch' ) {\n\n\t\tthis._onTouchStart( event );\n\n\t} else {\n\n\t\tthis._onMouseDown( event );\n\n\t}\n\n}\n\nfunction onPointerMove( event ) {\n\n\tif ( this.enabled === false ) return;\n\n\tif ( event.pointerType === 'touch' ) {\n\n\t\tthis._onTouchMove( event );\n\n\t} else {\n\n\t\tthis._onMouseMove( event );\n\n\t}\n\n}\n\nfunction onPointerUp( event ) {\n\n\tthis._removePointer( event );\n\n\tswitch ( this._pointers.length ) {\n\n\t\tcase 0:\n\n\t\t\tthis.domElement.releasePointerCapture( event.pointerId );\n\n\t\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\t\t\tthis.domElement.removeEventListener( 'pointerup', this._onPointerUp );\n\n\t\t\tthis.dispatchEvent( _endEvent );\n\n\t\t\tthis.state = _STATE.NONE;\n\n\t\t\tbreak;\n\n\t\tcase 1:\n\n\t\t\tconst pointerId = this._pointers[ 0 ];\n\t\t\tconst position = this._pointerPositions[ pointerId ];\n\n\t\t\t// minimal placeholder event - allows state correction on pointer-up\n\t\t\tthis._onTouchStart( { pointerId: pointerId, pageX: position.x, pageY: position.y } );\n\n\t\t\tbreak;\n\n\t}\n\n}\n\nfunction onMouseDown( event ) {\n\n\tlet mouseAction;\n\n\tswitch ( event.button ) {\n\n\t\tcase 0:\n\n\t\t\tmouseAction = this.mouseButtons.LEFT;\n\t\t\tbreak;\n\n\t\tcase 1:\n\n\t\t\tmouseAction = this.mouseButtons.MIDDLE;\n\t\t\tbreak;\n\n\t\tcase 2:\n\n\t\t\tmouseAction = this.mouseButtons.RIGHT;\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\tmouseAction = - 1;\n\n\t}\n\n\tswitch ( mouseAction ) {\n\n\t\tcase MOUSE.DOLLY:\n\n\t\t\tif ( this.enableZoom === false ) return;\n\n\t\t\tthis._handleMouseDownDolly( event );\n\n\t\t\tthis.state = _STATE.DOLLY;\n\n\t\t\tbreak;\n\n\t\tcase MOUSE.ROTATE:\n\n\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\t\tthis._handleMouseDownPan( event );\n\n\t\t\t\tthis.state = _STATE.PAN;\n\n\t\t\t} else {\n\n\t\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\t\tthis._handleMouseDownRotate( event );\n\n\t\t\t\tthis.state = _STATE.ROTATE;\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase MOUSE.PAN:\n\n\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\t\tthis._handleMouseDownRotate( event );\n\n\t\t\t\tthis.state = _STATE.ROTATE;\n\n\t\t\t} else {\n\n\t\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\t\tthis._handleMouseDownPan( event );\n\n\t\t\t\tthis.state = _STATE.PAN;\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\tthis.state = _STATE.NONE;\n\n\t}\n\n\tif ( this.state !== _STATE.NONE ) {\n\n\t\tthis.dispatchEvent( _startEvent );\n\n\t}\n\n}\n\nfunction onMouseMove( event ) {\n\n\tswitch ( this.state ) {\n\n\t\tcase _STATE.ROTATE:\n\n\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\tthis._handleMouseMoveRotate( event );\n\n\t\t\tbreak;\n\n\t\tcase _STATE.DOLLY:\n\n\t\t\tif ( this.enableZoom === false ) return;\n\n\t\t\tthis._handleMouseMoveDolly( event );\n\n\t\t\tbreak;\n\n\t\tcase _STATE.PAN:\n\n\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\tthis._handleMouseMovePan( event );\n\n\t\t\tbreak;\n\n\t}\n\n}\n\nfunction onMouseWheel( event ) {\n\n\tif ( this.enabled === false || this.enableZoom === false || this.state !== _STATE.NONE ) return;\n\n\tevent.preventDefault();\n\n\tthis.dispatchEvent( _startEvent );\n\n\tthis._handleMouseWheel( this._customWheelEvent( event ) );\n\n\tthis.dispatchEvent( _endEvent );\n\n}\n\nfunction onKeyDown( event ) {\n\n\tif ( this.enabled === false ) return;\n\n\tthis._handleKeyDown( event );\n\n}\n\nfunction onTouchStart( event ) {\n\n\tthis._trackPointer( event );\n\n\tswitch ( this._pointers.length ) {\n\n\t\tcase 1:\n\n\t\t\tswitch ( this.touches.ONE ) {\n\n\t\t\t\tcase TOUCH.ROTATE:\n\n\t\t\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\t\t\tthis._handleTouchStartRotate( event );\n\n\t\t\t\t\tthis.state = _STATE.TOUCH_ROTATE;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TOUCH.PAN:\n\n\t\t\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\t\t\tthis._handleTouchStartPan( event );\n\n\t\t\t\t\tthis.state = _STATE.TOUCH_PAN;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tthis.state = _STATE.NONE;\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase 2:\n\n\t\t\tswitch ( this.touches.TWO ) {\n\n\t\t\t\tcase TOUCH.DOLLY_PAN:\n\n\t\t\t\t\tif ( this.enableZoom === false && this.enablePan === false ) return;\n\n\t\t\t\t\tthis._handleTouchStartDollyPan( event );\n\n\t\t\t\t\tthis.state = _STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\tif ( this.enableZoom === false && this.enableRotate === false ) return;\n\n\t\t\t\t\tthis._handleTouchStartDollyRotate( event );\n\n\t\t\t\t\tthis.state = _STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tthis.state = _STATE.NONE;\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\tthis.state = _STATE.NONE;\n\n\t}\n\n\tif ( this.state !== _STATE.NONE ) {\n\n\t\tthis.dispatchEvent( _startEvent );\n\n\t}\n\n}\n\nfunction onTouchMove( event ) {\n\n\tthis._trackPointer( event );\n\n\tswitch ( this.state ) {\n\n\t\tcase _STATE.TOUCH_ROTATE:\n\n\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\tthis._handleTouchMoveRotate( event );\n\n\t\t\tthis.update();\n\n\t\t\tbreak;\n\n\t\tcase _STATE.TOUCH_PAN:\n\n\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\tthis._handleTouchMovePan( event );\n\n\t\t\tthis.update();\n\n\t\t\tbreak;\n\n\t\tcase _STATE.TOUCH_DOLLY_PAN:\n\n\t\t\tif ( this.enableZoom === false && this.enablePan === false ) return;\n\n\t\t\tthis._handleTouchMoveDollyPan( event );\n\n\t\t\tthis.update();\n\n\t\t\tbreak;\n\n\t\tcase _STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\tif ( this.enableZoom === false && this.enableRotate === false ) return;\n\n\t\t\tthis._handleTouchMoveDollyRotate( event );\n\n\t\t\tthis.update();\n\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\tthis.state = _STATE.NONE;\n\n\t}\n\n}\n\nfunction onContextMenu( event ) {\n\n\tif ( this.enabled === false ) return;\n\n\tevent.preventDefault();\n\n}\n\nfunction interceptControlDown( event ) {\n\n\tif ( event.key === 'Control' ) {\n\n\t\tthis._controlActive = true;\n\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\n\t\tdocument.addEventListener( 'keyup', this._interceptControlUp, { passive: true, capture: true } );\n\n\t}\n\n}\n\nfunction interceptControlUp( event ) {\n\n\tif ( event.key === 'Control' ) {\n\n\t\tthis._controlActive = false;\n\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\n\t\tdocument.removeEventListener( 'keyup', this._interceptControlUp, { passive: true, capture: true } );\n\n\t}\n\n}\n\nexport { OrbitControls };\n"],"mappings":"AAAA,SACCA,QAAQ,EACRC,KAAK,EACLC,UAAU,EACVC,SAAS,EACTC,KAAK,EACLC,OAAO,EACPC,OAAO,EACPC,KAAK,EACLC,GAAG,EACHC,SAAS,QACH,OAAO;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG;EAAEC,IAAI,EAAE;AAAS,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG;EAAED,IAAI,EAAE;AAAQ,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,SAAS,GAAG;EAAEF,IAAI,EAAE;AAAM,CAAC;AAEjC,MAAMG,IAAI,GAAG,IAAIN,GAAG,CAAC,CAAC;AACtB,MAAMO,MAAM,GAAG,IAAIR,KAAK,CAAC,CAAC;AAC1B,MAAMS,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAE,EAAE,GAAGT,SAAS,CAACU,OAAQ,CAAC;AAEtD,MAAMC,EAAE,GAAG,IAAId,OAAO,CAAC,CAAC;AACxB,MAAMe,MAAM,GAAG,CAAC,GAAGJ,IAAI,CAACK,EAAE;AAE1B,MAAMC,MAAM,GAAG;EACdC,IAAI,EAAE,CAAE,CAAC;EACTC,MAAM,EAAE,CAAC;EACTC,KAAK,EAAE,CAAC;EACRC,GAAG,EAAE,CAAC;EACNC,YAAY,EAAE,CAAC;EACfC,SAAS,EAAE,CAAC;EACZC,eAAe,EAAE,CAAC;EAClBC,kBAAkB,EAAE;AACrB,CAAC;AACD,MAAMC,IAAI,GAAG,QAAQ;;AAGrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,SAASjC,QAAQ,CAAC;EAEpC;AACD;AACA;AACA;AACA;AACA;EACCkC,WAAWA,CAAEC,MAAM,EAAEC,UAAU,GAAG,IAAI,EAAG;IAExC,KAAK,CAAED,MAAM,EAAEC,UAAW,CAAC;IAE3B,IAAI,CAACC,KAAK,GAAGd,MAAM,CAACC,IAAI;;IAExB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACc,MAAM,GAAG,IAAIhC,OAAO,CAAC,CAAC;;IAE3B;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACiC,MAAM,GAAG,IAAIjC,OAAO,CAAC,CAAC;;IAE3B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACkC,WAAW,GAAG,CAAC;;IAEpB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,WAAW,GAAGC,QAAQ;;IAE3B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,OAAO,GAAG,CAAC;;IAEhB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,OAAO,GAAGF,QAAQ;;IAEvB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACG,eAAe,GAAG,CAAC;;IAExB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,eAAe,GAAGJ,QAAQ;;IAE/B;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACK,aAAa,GAAG,CAAC;;IAEtB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAG/B,IAAI,CAACK,EAAE;;IAE5B;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC2B,eAAe,GAAG,CAAEP,QAAQ;;IAEjC;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACQ,eAAe,GAAGR,QAAQ;;IAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACS,aAAa,GAAG,KAAK;;IAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,aAAa,GAAG,IAAI;;IAEzB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAG,IAAI;;IAEtB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,GAAG;;IAEpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,YAAY,GAAG,IAAI;;IAExB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,WAAW,GAAG,GAAG;;IAEtB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,cAAc,GAAG,GAAG;;IAEzB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,IAAI;;IAErB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,QAAQ,GAAG,GAAG;;IAEnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,kBAAkB,GAAG,IAAI;;IAE9B;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,WAAW,GAAG,GAAG;;IAEtB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,YAAY,GAAG,KAAK;;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,UAAU,GAAG,KAAK;;IAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,eAAe,GAAG,GAAG;;IAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,IAAI,GAAG;MAAEC,IAAI,EAAE,WAAW;MAAEC,EAAE,EAAE,SAAS;MAAEC,KAAK,EAAE,YAAY;MAAEC,MAAM,EAAE;IAAY,CAAC;;IAE1F;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,YAAY,GAAG;MAAEJ,IAAI,EAAEjE,KAAK,CAACwB,MAAM;MAAE8C,MAAM,EAAEtE,KAAK,CAACyB,KAAK;MAAE0C,KAAK,EAAEnE,KAAK,CAAC0B;IAAI,CAAC;;IAEjF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAAC6C,OAAO,GAAG;MAAEC,GAAG,EAAErE,KAAK,CAACqB,MAAM;MAAEiD,GAAG,EAAEtE,KAAK,CAACuE;IAAU,CAAC;;IAE1D;AACF;AACA;AACA;AACA;IACE,IAAI,CAACC,OAAO,GAAG,IAAI,CAACtC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}