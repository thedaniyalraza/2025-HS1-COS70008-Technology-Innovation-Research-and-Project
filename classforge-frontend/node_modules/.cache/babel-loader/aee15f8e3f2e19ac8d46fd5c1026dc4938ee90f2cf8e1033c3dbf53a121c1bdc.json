{"ast":null,"code":"import { Clock, HalfFloatType, NoBlending, Vector2, WebGLRenderTarget } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { ClearMaskPass, MaskPass } from './MaskPass.js';\n\n/**\n * Used to implement post-processing effects in three.js.\n * The class manages a chain of post-processing passes to produce the final visual result.\n * Post-processing passes are executed in order of their addition/insertion.\n * The last pass is automatically rendered to screen.\n *\n * This module can only be used with {@link WebGLRenderer}.\n *\n * ```js\n * const composer = new EffectComposer( renderer );\n *\n * // adding some passes\n * const renderPass = new RenderPass( scene, camera );\n * composer.addPass( renderPass );\n *\n * const glitchPass = new GlitchPass();\n * composer.addPass( glitchPass );\n *\n * const outputPass = new OutputPass()\n * composer.addPass( outputPass );\n *\n * function animate() {\n *\n * \tcomposer.render(); // instead of renderer.render()\n *\n * }\n * ```\n */\nclass EffectComposer {\n  /**\n   * Constructs a new effect composer.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} [renderTarget] - This render target and a clone will\n   * be used as the internal read and write buffers. If not given, the composer creates\n   * the buffers automatically.\n   */\n  constructor(renderer, renderTarget) {\n    /**\n     * The renderer.\n     *\n     * @type {WebGLRenderer}\n     */\n    this.renderer = renderer;\n    this._pixelRatio = renderer.getPixelRatio();\n    if (renderTarget === undefined) {\n      const size = renderer.getSize(new Vector2());\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, {\n        type: HalfFloatType\n      });\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n    /**\n     * A reference to the internal write buffer. Passes usually write\n     * their result into this buffer.\n     *\n     * @type {WebGLRenderTarget}\n     */\n    this.writeBuffer = this.renderTarget1;\n\n    /**\n     * A reference to the internal read buffer. Passes usually read\n     * the previous render result from this buffer.\n     *\n     * @type {WebGLRenderTarget}\n     */\n    this.readBuffer = this.renderTarget2;\n\n    /**\n     * Whether the final pass is rendered to the screen (default framebuffer) or not.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.renderToScreen = true;\n\n    /**\n     * An array representing the (ordered) chain of post-processing passes.\n     *\n     * @type {Array<Pass>}\n     */\n    this.passes = [];\n\n    /**\n     * A copy pass used for internal swap operations.\n     *\n     * @private\n     * @type {ShaderPass}\n     */\n    this.copyPass = new ShaderPass(CopyShader);\n    this.copyPass.material.blending = NoBlending;\n\n    /**\n     * The intenral clock for managing time data.\n     *\n     * @private\n     * @type {Clock}\n     */\n    this.clock = new Clock();\n  }\n\n  /**\n   * Swaps the internal read/write buffers.\n   */\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n\n  /**\n   * Adds the given pass to the pass chain.\n   *\n   * @param {Pass} pass - The pass to add.\n   */\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  /**\n   * Inserts the given pass at a given index.\n   *\n   * @param {Pass} pass - The pass to insert.\n   * @param {number} index - The index into the pass chain.\n   */\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  /**\n   * Removes the given pass from the pass chain.\n   *\n   * @param {Pass} pass - The pass to remove.\n   */\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n\n  /**\n   * Returns `true` if the pass for the given index is the last enabled pass in the pass chain.\n   *\n   * @param {number} passIndex - The pass index.\n   * @return {boolean} Whether the the pass for the given index is the last pass in the pass chain.\n   */\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Executes all enabled post-processing passes in order to produce the final frame.\n   *\n   * @param {number} deltaTime - The delta time in seconds. If not given, the composer computes\n   * its own time delta value.\n   */\n  render(deltaTime) {\n    // deltaTime value is in seconds\n\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n    for (let i = 0, il = this.passes.length; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil;\n\n          //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n\n          //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n        this.swapBuffers();\n      }\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n\n  /**\n   * Resets the internal state of the EffectComposer.\n   *\n   * @param {WebGLRenderTarget} [renderTarget] - This render target has the same purpose like\n   * the one from the constructor. If set, it is used to setup the read and write buffers.\n   */\n  reset(renderTarget) {\n    if (renderTarget === undefined) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n\n  /**\n   * Resizes the internal read and write buffers as well as all passes. Similar to {@link WebGLRenderer#setSize},\n   * this method honors the current pixel ration.\n   *\n   * @param {number} width - The width in logical pixels.\n   * @param {number} height - The height in logical pixels.\n   */\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n\n  /**\n   * Sets device pixel ratio. This is usually used for HiDPI device to prevent blurring output.\n   * Setting the pixel ratio will automatically resize the composer.\n   *\n   * @param {number} pixelRatio - The pixel ratio to set.\n   */\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the composer is no longer used in your app.\n   */\n  dispose() {\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.copyPass.dispose();\n  }\n}\nexport { EffectComposer };","map":{"version":3,"names":["Clock","HalfFloatType","NoBlending","Vector2","WebGLRenderTarget","CopyShader","ShaderPass","ClearMaskPass","MaskPass","EffectComposer","constructor","renderer","renderTarget","_pixelRatio","getPixelRatio","undefined","size","getSize","_width","width","_height","height","type","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","passes","copyPass","material","blending","clock","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio"],"sources":["C:/Users/draza/classforge/classforge-frontend/node_modules/three/examples/jsm/postprocessing/EffectComposer.js"],"sourcesContent":["import {\n\tClock,\n\tHalfFloatType,\n\tNoBlending,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { ClearMaskPass, MaskPass } from './MaskPass.js';\n\n/**\n * Used to implement post-processing effects in three.js.\n * The class manages a chain of post-processing passes to produce the final visual result.\n * Post-processing passes are executed in order of their addition/insertion.\n * The last pass is automatically rendered to screen.\n *\n * This module can only be used with {@link WebGLRenderer}.\n *\n * ```js\n * const composer = new EffectComposer( renderer );\n *\n * // adding some passes\n * const renderPass = new RenderPass( scene, camera );\n * composer.addPass( renderPass );\n *\n * const glitchPass = new GlitchPass();\n * composer.addPass( glitchPass );\n *\n * const outputPass = new OutputPass()\n * composer.addPass( outputPass );\n *\n * function animate() {\n *\n * \tcomposer.render(); // instead of renderer.render()\n *\n * }\n * ```\n */\nclass EffectComposer {\n\n\t/**\n\t * Constructs a new effect composer.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} [renderTarget] - This render target and a clone will\n\t * be used as the internal read and write buffers. If not given, the composer creates\n\t * the buffers automatically.\n\t */\n\tconstructor( renderer, renderTarget ) {\n\n\t\t/**\n\t\t * The renderer.\n\t\t *\n\t\t * @type {WebGLRenderer}\n\t\t */\n\t\tthis.renderer = renderer;\n\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType } );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\t/**\n\t\t * A reference to the internal write buffer. Passes usually write\n\t\t * their result into this buffer.\n\t\t *\n\t\t * @type {WebGLRenderTarget}\n\t\t */\n\t\tthis.writeBuffer = this.renderTarget1;\n\n\t\t/**\n\t\t * A reference to the internal read buffer. Passes usually read\n\t\t * the previous render result from this buffer.\n\t\t *\n\t\t * @type {WebGLRenderTarget}\n\t\t */\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\t/**\n\t\t * Whether the final pass is rendered to the screen (default framebuffer) or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.renderToScreen = true;\n\n\t\t/**\n\t\t * An array representing the (ordered) chain of post-processing passes.\n\t\t *\n\t\t * @type {Array<Pass>}\n\t\t */\n\t\tthis.passes = [];\n\n\t\t/**\n\t\t * A copy pass used for internal swap operations.\n\t\t *\n\t\t * @private\n\t\t * @type {ShaderPass}\n\t\t */\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\t\tthis.copyPass.material.blending = NoBlending;\n\n\t\t/**\n\t\t * The intenral clock for managing time data.\n\t\t *\n\t\t * @private\n\t\t * @type {Clock}\n\t\t */\n\t\tthis.clock = new Clock();\n\n\t}\n\n\t/**\n\t * Swaps the internal read/write buffers.\n\t */\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\t/**\n\t * Adds the given pass to the pass chain.\n\t *\n\t * @param {Pass} pass - The pass to add.\n\t */\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\t/**\n\t * Inserts the given pass at a given index.\n\t *\n\t * @param {Pass} pass - The pass to insert.\n\t * @param {number} index - The index into the pass chain.\n\t */\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\t/**\n\t * Removes the given pass from the pass chain.\n\t *\n\t * @param {Pass} pass - The pass to remove.\n\t */\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns `true` if the pass for the given index is the last enabled pass in the pass chain.\n\t *\n\t * @param {number} passIndex - The pass index.\n\t * @return {boolean} Whether the the pass for the given index is the last pass in the pass chain.\n\t */\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Executes all enabled post-processing passes in order to produce the final frame.\n\t *\n\t * @param {number} deltaTime - The delta time in seconds. If not given, the composer computes\n\t * its own time delta value.\n\t */\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\t/**\n\t * Resets the internal state of the EffectComposer.\n\t *\n\t * @param {WebGLRenderTarget} [renderTarget] - This render target has the same purpose like\n\t * the one from the constructor. If set, it is used to setup the read and write buffers.\n\t */\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\t/**\n\t * Resizes the internal read and write buffers as well as all passes. Similar to {@link WebGLRenderer#setSize},\n\t * this method honors the current pixel ration.\n\t *\n\t * @param {number} width - The width in logical pixels.\n\t * @param {number} height - The height in logical pixels.\n\t */\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets device pixel ratio. This is usually used for HiDPI device to prevent blurring output.\n\t * Setting the pixel ratio will automatically resize the composer.\n\t *\n\t * @param {number} pixelRatio - The pixel ratio to set.\n\t */\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the composer is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\n\t\tthis.copyPass.dispose();\n\n\t}\n\n}\n\nexport { EffectComposer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}