{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute, OrthographicCamera, Mesh } from 'three';\n\n/**\n * Abstract base class for all post processing passes.\n *\n * This module is only relevant for post processing with {@link WebGLRenderer}.\n *\n * @abstract\n */\nclass Pass {\n  /**\n   * Constructs a new pass.\n   */\n  constructor() {\n    /**\n     * This flag can be used for type testing.\n     *\n     * @type {boolean}\n     * @readonly\n     * @default true\n     */\n    this.isPass = true;\n\n    /**\n     * If set to `true`, the pass is processed by the composer.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.enabled = true;\n\n    /**\n     * If set to `true`, the pass indicates to swap read and write buffer after rendering.\n     *\n     * @type {boolean}\n     * @default true\n     */\n    this.needsSwap = true;\n\n    /**\n     * If set to `true`, the pass clears its buffer before rendering\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.clear = false;\n\n    /**\n     * If set to `true`, the result of the pass is rendered to screen. The last pass in the composers\n     * pass chain gets automatically rendered to screen, no matter how this property is configured.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.renderToScreen = false;\n  }\n\n  /**\n   * Sets the size of the pass.\n   *\n   * @abstract\n   * @param {number} width - The width to set.\n   * @param {number} height - The width to set.\n   */\n  setSize(/* width, height */) {}\n\n  /**\n   * This method holds the render logic of a pass. It must be implemented in all derived classes.\n   *\n   * @abstract\n   * @param {WebGLRenderer} renderer - The renderer.\n   * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n   * destination for the pass.\n   * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n   * previous pass from this buffer.\n   * @param {number} deltaTime - The delta time in seconds.\n   * @param {boolean} maskActive - Whether masking is active or not.\n   */\n  render(/* renderer, writeBuffer, readBuffer, deltaTime, maskActive */\n  ) {\n    console.error('THREE.Pass: .render() must be implemented in derived pass.');\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the pass is no longer used in your app.\n   *\n   * @abstract\n   */\n  dispose() {}\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nclass FullscreenTriangleGeometry extends BufferGeometry {\n  constructor() {\n    super();\n    this.setAttribute('position', new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));\n    this.setAttribute('uv', new Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));\n  }\n}\nconst _geometry = new FullscreenTriangleGeometry();\n\n/**\n * This module is a helper for passes which need to render a full\n * screen effect which is quite common in context of post processing.\n *\n * The intended usage is to reuse a single full screen quad for rendering\n * subsequent passes by just reassigning the `material` reference.\n *\n * This module can only be used with {@link WebGLRenderer}.\n *\n * @augments Mesh\n */\nclass FullScreenQuad {\n  /**\n   * Constructs a new full screen quad.\n   *\n   * @param {?Material} material - The material to render te full screen quad with.\n   */\n  constructor(material) {\n    this._mesh = new Mesh(_geometry, material);\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this\n   * method whenever the instance is no longer used in your app.\n   */\n  dispose() {\n    this._mesh.geometry.dispose();\n  }\n\n  /**\n   * Renders the full screen quad.\n   *\n   * @param {WebGLRenderer} renderer - The renderer.\n   */\n  render(renderer) {\n    renderer.render(this._mesh, _camera);\n  }\n\n  /**\n   * The quad's material.\n   *\n   * @type {?Material}\n   */\n  get material() {\n    return this._mesh.material;\n  }\n  set material(value) {\n    this._mesh.material = value;\n  }\n}\nexport { Pass, FullScreenQuad };","map":{"version":3,"names":["BufferGeometry","Float32BufferAttribute","OrthographicCamera","Mesh","Pass","constructor","isPass","enabled","needsSwap","clear","renderToScreen","setSize","render","console","error","dispose","_camera","FullscreenTriangleGeometry","setAttribute","_geometry","FullScreenQuad","material","_mesh","geometry","renderer","value"],"sources":["C:/Users/draza/classforge/classforge-frontend/node_modules/three/examples/jsm/postprocessing/Pass.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\n/**\n * Abstract base class for all post processing passes.\n *\n * This module is only relevant for post processing with {@link WebGLRenderer}.\n *\n * @abstract\n */\nclass Pass {\n\n\t/**\n\t * Constructs a new pass.\n\t */\n\tconstructor() {\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isPass = true;\n\n\t\t/**\n\t\t * If set to `true`, the pass is processed by the composer.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enabled = true;\n\n\t\t/**\n\t\t * If set to `true`, the pass indicates to swap read and write buffer after rendering.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.needsSwap = true;\n\n\t\t/**\n\t\t * If set to `true`, the pass clears its buffer before rendering\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.clear = false;\n\n\t\t/**\n\t\t * If set to `true`, the result of the pass is rendered to screen. The last pass in the composers\n\t\t * pass chain gets automatically rendered to screen, no matter how this property is configured.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\t/**\n\t * Sets the size of the pass.\n\t *\n\t * @abstract\n\t * @param {number} width - The width to set.\n\t * @param {number} height - The width to set.\n\t */\n\tsetSize( /* width, height */ ) {}\n\n\t/**\n\t * This method holds the render logic of a pass. It must be implemented in all derived classes.\n\t *\n\t * @abstract\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t * @param {WebGLRenderTarget} writeBuffer - The write buffer. This buffer is intended as the rendering\n\t * destination for the pass.\n\t * @param {WebGLRenderTarget} readBuffer - The read buffer. The pass can access the result from the\n\t * previous pass from this buffer.\n\t * @param {number} deltaTime - The delta time in seconds.\n\t * @param {boolean} maskActive - Whether masking is active or not.\n\t */\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the pass is no longer used in your app.\n\t *\n\t * @abstract\n\t */\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nclass FullscreenTriangleGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\n\t}\n\n}\n\nconst _geometry = new FullscreenTriangleGeometry();\n\n\n/**\n * This module is a helper for passes which need to render a full\n * screen effect which is quite common in context of post processing.\n *\n * The intended usage is to reuse a single full screen quad for rendering\n * subsequent passes by just reassigning the `material` reference.\n *\n * This module can only be used with {@link WebGLRenderer}.\n *\n * @augments Mesh\n */\nclass FullScreenQuad {\n\n\t/**\n\t * Constructs a new full screen quad.\n\t *\n\t * @param {?Material} material - The material to render te full screen quad with.\n\t */\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this\n\t * method whenever the instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\t/**\n\t * Renders the full screen quad.\n\t *\n\t * @param {WebGLRenderer} renderer - The renderer.\n\t */\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\t/**\n\t * The quad's material.\n\t *\n\t * @type {?Material}\n\t */\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n"],"mappings":"AAAA,SACCA,cAAc,EACdC,sBAAsB,EACtBC,kBAAkB,EAClBC,IAAI,QACE,OAAO;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,CAAC;EAEV;AACD;AACA;EACCC,WAAWA,CAAA,EAAG;IAEb;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,MAAM,GAAG,IAAI;;IAElB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,OAAO,GAAG,IAAI;;IAEnB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,SAAS,GAAG,IAAI;;IAErB;AACF;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,KAAK,GAAG,KAAK;;IAElB;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACC,cAAc,GAAG,KAAK;EAE5B;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCC,OAAOA,CAAE,qBAAsB,CAAC;;EAEhC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,MAAMA,CAAE;EAAA,EAAiE;IAExEC,OAAO,CAACC,KAAK,CAAE,4DAA6D,CAAC;EAE9E;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCC,OAAOA,CAAA,EAAG,CAAC;AAEZ;;AAEA;;AAEA,MAAMC,OAAO,GAAG,IAAId,kBAAkB,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC;;AAE9D;;AAEA,MAAMe,0BAA0B,SAASjB,cAAc,CAAC;EAEvDK,WAAWA,CAAA,EAAG;IAEb,KAAK,CAAC,CAAC;IAEP,IAAI,CAACa,YAAY,CAAE,UAAU,EAAE,IAAIjB,sBAAsB,CAAE,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC;IACvG,IAAI,CAACiB,YAAY,CAAE,IAAI,EAAE,IAAIjB,sBAAsB,CAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC;EAEjF;AAED;AAEA,MAAMkB,SAAS,GAAG,IAAIF,0BAA0B,CAAC,CAAC;;AAGlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,cAAc,CAAC;EAEpB;AACD;AACA;AACA;AACA;EACCf,WAAWA,CAAEgB,QAAQ,EAAG;IAEvB,IAAI,CAACC,KAAK,GAAG,IAAInB,IAAI,CAAEgB,SAAS,EAAEE,QAAS,CAAC;EAE7C;;EAEA;AACD;AACA;AACA;EACCN,OAAOA,CAAA,EAAG;IAET,IAAI,CAACO,KAAK,CAACC,QAAQ,CAACR,OAAO,CAAC,CAAC;EAE9B;;EAEA;AACD;AACA;AACA;AACA;EACCH,MAAMA,CAAEY,QAAQ,EAAG;IAElBA,QAAQ,CAACZ,MAAM,CAAE,IAAI,CAACU,KAAK,EAAEN,OAAQ,CAAC;EAEvC;;EAEA;AACD;AACA;AACA;AACA;EACC,IAAIK,QAAQA,CAAA,EAAG;IAEd,OAAO,IAAI,CAACC,KAAK,CAACD,QAAQ;EAE3B;EAEA,IAAIA,QAAQA,CAAEI,KAAK,EAAG;IAErB,IAAI,CAACH,KAAK,CAACD,QAAQ,GAAGI,KAAK;EAE5B;AAED;AAEA,SAASrB,IAAI,EAAEgB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}